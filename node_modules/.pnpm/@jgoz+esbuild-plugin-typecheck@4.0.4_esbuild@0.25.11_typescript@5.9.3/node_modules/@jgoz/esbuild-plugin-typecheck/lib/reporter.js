"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reporter = void 0;
const path_1 = __importDefault(require("path"));
const typescript_1 = __importDefault(require("typescript"));
class Reporter {
    constructor(basedir, postMessage = () => { }) {
        this.basedir = basedir;
        this.postMessage = postMessage;
        this.start = Date.now();
        this.reportBuildStart = ({ build = false, watch = false } = {}) => {
            this.postMessage({ type: 'start', build, watch });
        };
        this.reportBuildDone = (errorCount) => {
            this.postMessage({ type: 'done', errorCount, duration: Date.now() - this.start });
        };
        this.reportDiagnostic = (diagnostic) => {
            this.reportDiagnostics([diagnostic]);
        };
        this.reportDiagnostics = (diagnostics) => {
            this.postMessage({
                type: 'diagnostic',
                diagnostics: Array.from(Reporter.transformDiagnostics(this.basedir, diagnostics)),
                output: Reporter.getOutput(diagnostics),
            });
        };
        this.reportSummaryDiagnostic = (diagnostic) => {
            switch (diagnostic.code) {
                case 6193: // Found 1 error. Watching for file changes.
                case 6194: // Found {0} errors. Watching for file changes.
                    if (typeof diagnostic.messageText === 'string') {
                        const errorCount = Reporter.extractErrorCount(diagnostic.messageText);
                        this.reportBuildDone(errorCount);
                        break;
                    }
                case 6032: // File change detected. Starting incremental compilation...
                    this.reportBuildStart();
                    this.markBuildStart(); // If the watcher decides to start on its own, we need to record the start time
                    break;
                case 6031: // Starting compilation in watch mode...
                    return; // Don't log these
                default:
                    this.postMessage({
                        type: 'summary',
                        diagnostics: Array.from(Reporter.transformDiagnostics(this.basedir, [diagnostic])),
                        output: Reporter.getOutput([diagnostic]),
                    });
                    break;
            }
        };
    }
    markBuildStart() {
        this.start = Date.now();
    }
    static extractErrorCount(msg) {
        const match = /Found (\d+) errors?/.exec(msg);
        return match ? Number(match[1]) : 0;
    }
    static getOutput(diagnostics) {
        return {
            pretty: typescript_1.default.formatDiagnosticsWithColorAndContext(diagnostics, Reporter.formatHost),
            standard: typescript_1.default.formatDiagnostics(diagnostics, Reporter.formatHost),
        };
    }
    static *transformDiagnostics(basedir, diagnostics) {
        for (const diagnostic of diagnostics) {
            const type = diagnostic.category === typescript_1.default.DiagnosticCategory.Error
                ? 'error'
                : diagnostic.category === typescript_1.default.DiagnosticCategory.Warning
                    ? 'warning'
                    : undefined;
            if (!type)
                continue;
            const { file, length, start } = diagnostic;
            const messageText = typescript_1.default.flattenDiagnosticMessageText(diagnostic.messageText, '\n\n');
            if (!file)
                continue;
            if (start === undefined || length === undefined) {
                yield {
                    type,
                    message: {
                        id: `TS${diagnostic.code}`,
                        detail: diagnostic.relatedInformation,
                        location: null,
                        notes: [],
                        pluginName: 'esbuild-plugin-typecheck',
                        text: messageText,
                    },
                };
                continue;
            }
            const { line, character } = typescript_1.default.getLineAndCharacterOfPosition(file, start);
            const lastLineInFile = typescript_1.default.getLineAndCharacterOfPosition(file, file.text.length).line;
            const lineStart = typescript_1.default.getPositionOfLineAndCharacter(file, line, 0);
            const lineEnd = line < lastLineInFile
                ? typescript_1.default.getPositionOfLineAndCharacter(file, line + 1, 0)
                : file.text.length;
            const lineText = file.text.slice(lineStart, lineEnd).trimEnd();
            const safeLength = character + length > lineEnd - lineStart ? lineEnd - lineStart - character : length;
            const message = {
                id: `TS${diagnostic.code}`,
                detail: undefined,
                location: {
                    column: character,
                    file: path_1.default.relative(basedir, file.fileName),
                    length: safeLength,
                    line,
                    lineText,
                    namespace: '',
                    suggestion: '',
                },
                pluginName: 'esbuild-plugin-typecheck',
                notes: [],
                text: messageText,
            };
            yield { type, message };
        }
    }
}
exports.Reporter = Reporter;
Reporter.formatHost = {
    getCanonicalFileName: path => path,
    getCurrentDirectory: typescript_1.default.sys.getCurrentDirectory,
    getNewLine: () => typescript_1.default.sys.newLine,
};
//# sourceMappingURL=reporter.js.map