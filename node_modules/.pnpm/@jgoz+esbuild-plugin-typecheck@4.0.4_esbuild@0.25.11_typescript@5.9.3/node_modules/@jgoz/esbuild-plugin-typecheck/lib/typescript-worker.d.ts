import type { Message } from 'esbuild';
import ts from 'typescript';
type BuildMode = 'readonly' | 'write-output';
export interface EsbuildDiagnosticOutput {
    pretty: string;
    standard: string;
}
export interface EsbuildDiagnosticMessage {
    type: 'error' | 'warning';
    message: Message;
}
export interface WorkerDiagnosticsMessage {
    type: 'diagnostic' | 'summary';
    diagnostics: readonly EsbuildDiagnosticMessage[];
    output: EsbuildDiagnosticOutput;
}
export interface WorkerBuildMessage {
    type: 'build';
}
export interface WorkerStartMessage {
    type: 'start';
    build?: boolean;
    watch?: boolean;
}
export interface WorkerDoneMessage {
    type: 'done';
    errorCount: number;
    duration: number;
}
export type WorkerMessage = WorkerDiagnosticsMessage | WorkerBuildMessage | WorkerStartMessage | WorkerDoneMessage;
export interface TypescriptWorkerOptions {
    basedir: string;
    build?: boolean | ts.BuildOptions;
    buildMode?: BuildMode;
    compilerOptions?: ts.CompilerOptions;
    configFile: string | undefined;
    watch: boolean;
}
export {};
//# sourceMappingURL=typescript-worker.d.ts.map