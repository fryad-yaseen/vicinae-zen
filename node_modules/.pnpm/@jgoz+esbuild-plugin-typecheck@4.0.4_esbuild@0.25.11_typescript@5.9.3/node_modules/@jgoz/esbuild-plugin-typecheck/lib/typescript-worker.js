"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const realFS = __importStar(require("fs"));
const memfs_1 = require("memfs");
const path_1 = __importStar(require("path"));
const typescript_1 = __importDefault(require("typescript"));
const unionfs_1 = require("unionfs");
const worker_threads_1 = require("worker_threads");
const reporter_1 = require("./reporter");
/**
 * Creates a ts.System implementation that redirects all write
 * operations to an in-memory FS. Read operations first try the memory
 * FS and fall back to the real FS.
 */
function createPartialMemoryBackedSystem() {
    // @ts-expect-error -- IFs and IFS are not compatible...
    const unionfs = unionfs_1.ufs.use(memfs_1.fs).use(realFS);
    const system = {
        ...typescript_1.default.sys,
        createDirectory(path) {
            memfs_1.fs.mkdirSync(path);
        },
        deleteFile(path) {
            if (memfs_1.fs.existsSync(path))
                memfs_1.fs.unlinkSync(path);
        },
        directoryExists(path) {
            return unionfs.existsSync(path);
        },
        fileExists(path) {
            return unionfs.existsSync(path);
        },
        getDirectories(path) {
            return unionfs.readdirSync(path, { encoding: 'utf-8', withFileTypes: false });
        },
        getModifiedTime(path) {
            if (!unionfs.existsSync(path))
                return undefined;
            const stat = unionfs.statSync(path);
            return stat.mtime;
        },
        getFileSize(path) {
            if (!unionfs.existsSync(path))
                return 0;
            const stat = unionfs.statSync(path);
            return stat.size;
        },
        readFile(path, encoding = 'utf-8') {
            if (!unionfs.existsSync(path))
                return undefined;
            return unionfs.readFileSync(path, { encoding: encoding });
        },
        setModifiedTime(path, time) {
            memfs_1.fs.utimesSync(path, time, time);
        },
        writeFile(path, data, writeBOM) {
            memfs_1.fs.mkdirpSync((0, path_1.dirname)(path));
            memfs_1.fs.writeFileSync(path, writeBOM ? '\ufeff' + data : data);
        },
    };
    return system;
}
function createBuilder(configFile, buildOptions, buildMode, reporter) {
    const system = buildMode === 'readonly' ? createPartialMemoryBackedSystem() : typescript_1.default.sys;
    const builderHost = typescript_1.default.createSolutionBuilderHost(system, typescript_1.default.createSemanticDiagnosticsBuilderProgram, reporter.reportDiagnostic, reporter.reportSummaryDiagnostic, reporter.reportBuildDone);
    const builder = typescript_1.default.createSolutionBuilder(builderHost, [configFile], buildOptions);
    return [builder, system];
}
function createWatchBuilder(configFile, buildOptions, buildMode, reporter) {
    const system = buildMode === 'readonly' ? createPartialMemoryBackedSystem() : typescript_1.default.sys;
    const builderHost = typescript_1.default.createSolutionBuilderWithWatchHost(system, typescript_1.default.createSemanticDiagnosticsBuilderProgram, reporter.reportDiagnostic, reporter.reportSummaryDiagnostic, reporter.reportSummaryDiagnostic);
    const builder = typescript_1.default.createSolutionBuilderWithWatch(builderHost, [configFile], {
        incremental: true,
        ...buildOptions,
    }, { excludeDirectories: ['node_modules'] });
    return [builder, system];
}
function runCompiler(commandLine, host, reporter, oldProgram) {
    const { options: compilerOptions, fileNames, errors, projectReferences } = commandLine;
    const program = typescript_1.default.createEmitAndSemanticDiagnosticsBuilderProgram(fileNames, compilerOptions, host, oldProgram, errors, projectReferences);
    const diagnostics = [
        ...program.getConfigFileParsingDiagnostics(),
        ...program.getSyntacticDiagnostics(),
        ...program.getOptionsDiagnostics(),
        ...program.getSemanticDiagnostics(),
    ];
    reporter.reportDiagnostics(diagnostics);
    const errorCount = diagnostics.filter(d => d.category === typescript_1.default.DiagnosticCategory.Error).length;
    reporter.reportBuildDone(errorCount);
    return program;
}
function startWorker(options, port) {
    const { basedir, buildMode = 'readonly', configFile = typescript_1.default.findConfigFile(basedir, typescript_1.default.sys.fileExists, 'tsconfig.json'), watch, } = options;
    if (!configFile) {
        throw new Error(`Could not find a valid "tsconfig.json" (searching in "${basedir}").`);
    }
    const { config } = typescript_1.default.readConfigFile(configFile, typescript_1.default.sys.readFile);
    config.compilerOptions = { ...config.compilerOptions, ...options.compilerOptions };
    const commandLine = typescript_1.default.parseJsonConfigFileContent(config, typescript_1.default.sys, path_1.default.dirname(configFile));
    const build = options.build ?? commandLine.options.composite ?? false;
    const { options: compilerOptions } = commandLine;
    if (compilerOptions.noEmit === undefined)
        compilerOptions.noEmit = true;
    const reporter = new reporter_1.Reporter(basedir, msg => port.postMessage(msg));
    const listen = watch ? port.on.bind(port) : port.once.bind(port);
    if (build) {
        const buildOptions = typeof build === 'boolean' ? {} : build;
        const [builder, system] = watch
            ? createWatchBuilder(configFile, buildOptions, buildMode, reporter)
            : createBuilder(configFile, buildOptions, buildMode, reporter);
        let firstRun = true;
        listen('message', (msg) => {
            if (msg.type === 'build') {
                if (firstRun) {
                    reporter.reportBuildStart();
                    firstRun = false;
                }
                reporter.markBuildStart();
                builder.build(configFile, undefined, system.writeFile);
            }
        });
    }
    else {
        let builderProgram;
        const compilerHost = typescript_1.default.createIncrementalCompilerHost(compilerOptions, typescript_1.default.sys);
        listen('message', (msg) => {
            if (msg.type === 'build') {
                reporter.reportBuildStart();
                reporter.markBuildStart();
                builderProgram = runCompiler(commandLine, compilerHost, reporter, builderProgram);
            }
        });
    }
}
if (!worker_threads_1.isMainThread && worker_threads_1.parentPort) {
    const workerOptions = worker_threads_1.workerData;
    if (!workerOptions?.basedir) {
        throw new Error(`compiler-builder (worker) expected valid builder options as workerData, got "${JSON.stringify(worker_threads_1.workerData)}"`);
    }
    startWorker(workerOptions, worker_threads_1.parentPort);
}
//# sourceMappingURL=typescript-worker.js.map