import { PathLike } from "fs";
export declare namespace Clipboard {
    type Content = {
        text: string;
    } | {
        file: PathLike;
    } | {
        html: string;
        text?: string;
    };
    type ReadContent = {
        text: string;
        file?: string;
        html?: string;
    };
    type CopyOptions = {
        concealed?: boolean;
    };
    /**
     * Copy the provided content in the clipboard.
     * The `concealed` option can be passed so that the created clipboard selection
     * does not get indexed by the Vicinae clipboard manager.
     */
    function copy(text: string | number | Clipboard.Content, options?: Clipboard.CopyOptions): Promise<void>;
    /**
     * Paste the provided clipboard content to the active window.
     * If the environment does not support either getting the active window
     * or pasting content to it directly, this will fallback to a regular
     * clipboard copy.
     */
    function paste(text: string | Clipboard.Content): Promise<void>;
    /**
     * Read the current content of the clipboard, which can contain text, html and a file path.
     * Note: the offset option is not yet implemented
     *
     * ```ts
     * const { text, html, file } = await Clipboard.read();
     * ```
     */
    function read(options?: {
        offset?: number;
    }): Promise<Clipboard.ReadContent>;
    /**
     * Read the text representation of the current clipboard data. If the data is not text at all, this
     * returns an empty string.
     * If you want to read optional html or file path, consider @see {Clipboard.read}
     * Note: the offset option is not yet implemented.
     *
     * ```ts
     * const text = await Clipboard.readText();
     * ```
     */
    function readText(options?: {
        offset?: number;
    }): Promise<string>;
    /**
     * Clear the current clipboard content.
     */
    function clear(): Promise<void>;
}
