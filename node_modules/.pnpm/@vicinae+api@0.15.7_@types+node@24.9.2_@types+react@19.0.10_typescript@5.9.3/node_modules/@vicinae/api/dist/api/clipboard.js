"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Clipboard = void 0;
const bus_1 = require("./bus");
const clipboard_1 = require("./proto/clipboard");
var Clipboard;
(function (Clipboard) {
    function mapContent(content) {
        let ct = clipboard_1.ClipboardContent.create();
        if (typeof content != "object") {
            ct.text = `${content}`;
        }
        else {
            if (content["file"]) {
                ct.path = { path: content["file"] };
            }
            else if (content["html"]) {
                ct.html = { html: content["html"], text: content["text"] };
            }
            else {
                ct.text = content["text"];
            }
        }
        return ct;
    }
    /**
     * Copy the provided content in the clipboard.
     * The `concealed` option can be passed so that the created clipboard selection
     * does not get indexed by the Vicinae clipboard manager.
     */
    async function copy(text, options = {}) {
        await bus_1.bus.turboRequest("clipboard.copy", {
            content: mapContent(text),
            options: { concealed: options.concealed ?? false },
        });
    }
    Clipboard.copy = copy;
    /**
     * Paste the provided clipboard content to the active window.
     * If the environment does not support either getting the active window
     * or pasting content to it directly, this will fallback to a regular
     * clipboard copy.
     */
    async function paste(text) {
        await bus_1.bus.turboRequest("clipboard.paste", {
            content: mapContent(text),
        });
    }
    Clipboard.paste = paste;
    /**
     * Read the current content of the clipboard, which can contain text, html and a file path.
     * Note: the offset option is not yet implemented
     *
     * ```ts
     * const { text, html, file } = await Clipboard.read();
     * ```
     */
    async function read(options) {
        const res = await bus_1.bus.turboRequest('clipboard.readContent', {});
        return res.unwrap().content;
    }
    Clipboard.read = read;
    /**
     * Read the text representation of the current clipboard data. If the data is not text at all, this
     * returns an empty string.
     * If you want to read optional html or file path, consider @see {Clipboard.read}
     * Note: the offset option is not yet implemented.
     *
     * ```ts
     * const text = await Clipboard.readText();
     * ```
     */
    async function readText(options) {
        const { text } = await read(options);
        return text;
    }
    Clipboard.readText = readText;
    /**
     * Clear the current clipboard content.
     */
    async function clear() {
        await bus_1.bus.turboRequest('clipboard.clear', {});
    }
    Clipboard.clear = clear;
})(Clipboard || (exports.Clipboard = Clipboard = {}));
