"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Action = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const index_1 = require("../hooks/index");
const clipboard_1 = require("../clipboard");
const utils_1 = require("../utils");
const icon_1 = require("../icon");
const controls_1 = require("../controls");
const ActionRoot = (props) => {
    return (0, jsx_runtime_1.jsx)("action", { ...props });
};
const CopyToClipboard = ({ title = "Copy to clipboard", icon = icon_1.Icon.CopyClipboard, content, concealed = false, onCopy, ...props }) => {
    return ((0, jsx_runtime_1.jsx)(ActionRoot, { title: title, ...props, icon: icon_1.Icon.CopyClipboard, onAction: async () => {
            clipboard_1.Clipboard.copy(content, { concealed });
            (0, controls_1.closeMainWindow)();
            onCopy?.(content);
        } }));
};
const Paste = ({ title = "Paste to active window", icon = icon_1.Icon.CopyClipboard, content, onPaste, ...props }) => {
    return ((0, jsx_runtime_1.jsx)(ActionRoot, { title: title, ...props, icon: icon_1.Icon.CopyClipboard, onAction: async () => {
            (0, controls_1.closeMainWindow)(); // we close before pasting to make sure focus has been properly restored
            clipboard_1.Clipboard.paste(content);
            onPaste?.(content);
        } }));
};
const Open = ({ target, app, ...props }) => {
    return ((0, jsx_runtime_1.jsx)(ActionRoot, { ...props, onAction: () => {
            (0, utils_1.open)(target, app);
        } }));
};
const OpenInBrowser = ({ url, ...props }) => {
    return ((0, jsx_runtime_1.jsx)(ActionRoot, { ...props, onAction: () => {
            (0, utils_1.open)(url);
        } }));
};
const Push = ({ target, ...props }) => {
    const { push } = (0, index_1.useNavigation)();
    return ((0, jsx_runtime_1.jsx)(ActionRoot, { ...props, onAction: () => {
            console.log("activate push action");
            push(target);
        } }));
};
const SubmitForm = ({ title = "Submit", ...props }) => {
    const nativeProps = {
        ...props,
        title,
        onAction: () => { }
    };
    return (0, jsx_runtime_1.jsx)("action", { ...nativeProps });
};
exports.Action = Object.assign(ActionRoot, {
    CopyToClipboard,
    Push,
    Open,
    Paste,
    SubmitForm,
    OpenInBrowser,
    Style: {
        Regular: "regular",
        Destructive: "destructive",
    },
});
