import { ReactNode, Ref } from "react";
import { ImageLike } from "../image";
type FormProps = {
    actions?: React.ReactNode;
    children?: React.ReactNode;
    enableDrafts?: boolean;
    isLoading?: boolean;
    navigationTitle?: string;
    searchBarAccessory?: React.ReactNode;
};
export type FormItemRef = {
    focus: () => void;
    reset: () => void;
};
interface FormItemProps<T extends Form.Value> {
    id: string;
    title?: string;
    info?: string;
    error?: string;
    storeValue?: boolean;
    autoFocus?: boolean;
    value?: T;
    defaultValue?: T;
    onChange?: (newValue: T) => void;
    onBlur?: (event: FormEvent<T>) => void;
    onFocus?: (event: FormEvent<T>) => void;
}
interface FormEvent<T extends Form.Value> {
    target: {
        id: string;
        value?: T;
    };
    type: FormEventType;
}
type FormEventType = "focus" | "blur";
export declare namespace Form {
    type Props = FormProps;
    type TextField = FormItemRef;
    type PasswordField = FormItemRef;
    type TextArea = FormItemRef;
    type Checkbox = FormItemRef;
    type DatePicker = FormItemRef;
    type Dropdown = FormItemRef;
    type TagPicker = FormItemRef;
    type FilePicker = FormItemRef;
    type ItemReference = FormItemRef;
    type ItemProps<T extends Value> = FormItemProps<T>;
    type Value = string | number | boolean | string[] | number[] | Date | null;
    type Values = {
        [itemId: string]: Value;
    };
}
interface WithFormRef<T> {
    ref?: Ref<T>;
}
interface TextFieldProps extends FormItemProps<string>, WithFormRef<Form.TextField> {
}
interface PasswordFieldProps extends FormItemProps<string>, WithFormRef<Form.PasswordField> {
}
interface DatePickerProps extends FormItemProps<Date | null>, WithFormRef<Form.DatePicker> {
}
interface CheckboxProps extends FormItemProps<boolean>, WithFormRef<Form.Checkbox> {
    label?: string;
}
interface DropdownProps extends FormItemProps<string>, WithFormRef<Form.Dropdown> {
    tooltip?: string;
    children?: ReactNode;
    filtering?: boolean;
    isLoading?: boolean;
    placeholder?: string;
    throttle?: boolean;
    onSearchTextChange?: (text: string) => void;
}
interface TagPickerProps extends FormItemProps<string[]>, WithFormRef<Form.TagPicker> {
    children?: ReactNode;
}
interface TextAreaProps extends FormItemProps<string>, WithFormRef<Form.TextArea> {
}
interface FilePickerProps extends FormItemProps<string[]>, WithFormRef<Form.FilePicker> {
}
type DescriptionProps = {
    text: string;
    title?: string;
};
export declare const Form: import("react").FC<FormProps> & {
    TextField: import("react").FC<TextFieldProps>;
    PasswordField: import("react").FC<PasswordFieldProps>;
    DatePicker: import("react").FC<DatePickerProps>;
    Checkbox: import("react").FC<CheckboxProps>;
    TextArea: import("react").FC<TextAreaProps>;
    Dropdown: import("react").FC<DropdownProps> & {
        Item: import("react").FC<{
            title: string;
            value: string;
            icon?: import("../image").Image.ImageLike;
            keywords?: string[];
        }>;
        Section: import("react").FC<{
            title?: string;
            children?: ReactNode;
        }>;
    };
    Description: import("react").FC<DescriptionProps>;
    TagPicker: import("react").FC<TagPickerProps> & {
        Item: import("react").FC<{
            title: string;
            value: string;
            icon: ImageLike;
        }>;
    };
    FilePicker: import("react").FC<FilePickerProps>;
    Separator: () => import("react/jsx-runtime").JSX.Element;
};
export {};
