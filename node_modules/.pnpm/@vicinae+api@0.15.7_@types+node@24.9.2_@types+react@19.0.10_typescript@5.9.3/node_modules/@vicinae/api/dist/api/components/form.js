"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Form = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const use_imperative_form_handle_1 = require("../hooks/use-imperative-form-handle");
const dropdown_1 = require("./dropdown");
const wrapFormItemProps = (props) => {
    // TODO: pass the current value in the event
    return {
        ...props,
        onFocus: () => props.onFocus?.({ type: 'focus', target: { id: props.id } }),
        onBlur: () => props.onBlur?.({ type: 'blur', target: { id: props.id } })
    };
};
const FormRoot = ({ enableDrafts = false, actions, children, isLoading = false, navigationTitle, searchBarAccessory, }) => {
    return ((0, jsx_runtime_1.jsxs)("form", { 
        //@ts-ignore
        enableDrafts: enableDrafts, isLoading: isLoading, navigationTitle: navigationTitle, children: [searchBarAccessory, children, actions] }));
};
const TextField = ({ ref, ...props }) => {
    (0, use_imperative_form_handle_1.useImperativeFormHandle)(ref);
    return ((0, jsx_runtime_1.jsx)("text-field", { ...wrapFormItemProps(props) }));
};
const PasswordField = ({ ref, ...props }) => {
    (0, use_imperative_form_handle_1.useImperativeFormHandle)(ref);
    return (0, jsx_runtime_1.jsx)("password-field", { ...props });
};
const DatePicker = ({ ref, ...props }) => {
    (0, use_imperative_form_handle_1.useImperativeFormHandle)(ref);
    return (0, jsx_runtime_1.jsx)("date-picker-field", { ...props });
};
const Checkbox = ({ ref, ...props }) => {
    (0, use_imperative_form_handle_1.useImperativeFormHandle)(ref);
    return ((0, jsx_runtime_1.jsx)("checkbox-field", { ...wrapFormItemProps(props) }));
};
//FIXME: we probably need to reuse the existing dropdown in
// a smarter way.
const DropdownRoot = ({ ref, children, ...props }) => {
    // FIXME: testing stuff, we need to generalize this to all form items
    (0, use_imperative_form_handle_1.useImperativeFormHandle)(ref);
    return ((0, jsx_runtime_1.jsx)("dropdown-field", { ...wrapFormItemProps(props), children: children }));
};
const Dropdown = Object.assign(DropdownRoot, {
    Item: dropdown_1.Dropdown.Item,
    Section: dropdown_1.Dropdown.Section
});
const TagPickerRoot = ({ children, ...props }) => {
    return ((0, jsx_runtime_1.jsx)("tag-picker-field", { ...wrapFormItemProps(props), children: children }));
};
const TagPickerItem = ({ icon, ...props }) => {
    return (0, jsx_runtime_1.jsx)("tag-picker-item", { ...props, icon: icon });
};
const TagPicker = Object.assign(TagPickerRoot, {
    Item: TagPickerItem
});
const TextArea = ({ ref, ...props }) => {
    (0, use_imperative_form_handle_1.useImperativeFormHandle)(ref);
    return ((0, jsx_runtime_1.jsx)("text-area-field", { ...wrapFormItemProps(props) }));
};
const FilePicker = ({ ref, ...props }) => {
    (0, use_imperative_form_handle_1.useImperativeFormHandle)(ref);
    return ((0, jsx_runtime_1.jsx)("file-picker-field", { ...wrapFormItemProps(props) }));
};
const Description = (props) => {
    return (0, jsx_runtime_1.jsx)("form-description", { ...props });
};
exports.Form = Object.assign(FormRoot, {
    TextField,
    PasswordField,
    DatePicker,
    Checkbox,
    TextArea,
    Dropdown,
    Description,
    TagPicker,
    FilePicker,
    Separator: () => (0, jsx_runtime_1.jsx)("separator", {}),
});
