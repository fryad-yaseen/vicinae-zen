import React, { ReactNode } from "react";
import { Image, ImageLike } from "../image";
import { Color, ColorLike } from "../color";
declare enum GridInset {
    Small = "small",
    Medium = "medium",
    Large = "large"
}
declare enum GridFit {
    Contain = "contain",
    Fill = "fill"
}
export declare namespace Grid {
    type BaseSection = {
        inset?: GridInset;
        columns?: number;
        fit?: GridFit;
        aspectRatio?: Grid.AspectRatio;
    };
    export type Props = BaseSection & {
        actions?: React.ReactNode;
        children?: React.ReactNode;
        filtering?: boolean;
        /**
         * @deprecated use filtering
         */
        enableFiltering?: boolean;
        isLoading?: boolean;
        searchText?: string;
        searchBarPlaceholder?: string;
        navigationTitle?: string;
        searchBarAccessory?: ReactNode;
        onSearchTextChange?: (text: string) => void;
        onSelectionChange?: (id: string) => void;
    };
    export namespace Section {
        type Props = BaseSection & {
            title?: string;
            subtitle?: string;
            children?: ReactNode;
        };
    }
    export type Fit = GridFit;
    export type Inset = GridInset;
    export type AspectRatio = "1" | "3/2" | "2/3" | "4/3" | "3/4" | "16/9" | "9/16" | '21/9' | '9/21' | '32/9' | '9/32';
    export namespace Item {
        export type Props = {
            title?: string;
            detail?: React.ReactNode;
            keywords?: string[];
            icon?: ImageLike;
            content: Image.ImageLike | {
                color: ColorLike;
            } | {
                value: Image.ImageLike;
                tooltip?: string;
            };
            id?: string;
            subtitle?: string;
            actions?: ReactNode;
            accessories?: Grid.Item.Accessory[];
        };
        type Tag = string | Date | undefined | null | {
            color: ColorLike;
            value: string | Date | undefined | null;
        };
        type Text = string | Date | undefined | null | {
            color: Color;
            value: string | Date | undefined | null;
        };
        export type Accessory = ({
            tag?: Tag;
        } | {
            text?: Text;
        }) & {
            icon?: Image.ImageLike;
            tooltip?: string | null;
        };
        export {};
    }
    export {};
}
export declare const Grid: React.FC<Grid.Props> & {
    Section: React.FC<Grid.Section.Props>;
    EmptyView: React.FC<import("./empty-view").EmptyViewProps>;
    Dropdown: React.FC<{
        tooltip?: string;
        children?: ReactNode;
        defaultValue?: string;
        filtering?: boolean;
        id?: string;
        isLoading?: boolean;
        placeholder?: string;
        storeValue?: boolean;
        throttle?: boolean;
        value?: string;
        onChange?: (newValue: string) => void;
        onSearchTextChange?: (text: string) => void;
    }> & {
        Item: React.FC<{
            title: string;
            value: string;
            icon?: Image.ImageLike;
            keywords?: string[];
        }>;
        Section: React.FC<{
            title?: string;
            children?: ReactNode;
        }>;
    };
    Fit: typeof GridFit;
    Inset: typeof GridInset;
    Item: React.FC<Grid.Item.Props>;
};
export {};
