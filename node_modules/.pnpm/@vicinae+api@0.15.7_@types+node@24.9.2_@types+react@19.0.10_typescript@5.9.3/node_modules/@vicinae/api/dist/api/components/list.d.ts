import React, { ReactNode } from "react";
import { Image, ImageLike } from "../image";
import { Color, ColorLike } from "../color";
export declare namespace List {
    type Props = {
        actions?: React.ReactNode;
        children?: React.ReactNode;
        filtering?: boolean;
        /**
         * @deprecated use filtering
         */
        enableFiltering?: boolean;
        isLoading?: boolean;
        isShowingDetail?: boolean;
        searchText?: string;
        searchBarPlaceholder?: string;
        navigationTitle?: string;
        searchBarAccessory?: ReactNode;
        onSearchTextChange?: (text: string) => void;
        onSelectionChange?: (id: string) => void;
    };
    namespace Section {
        type Props = {
            title?: string;
            subtitle?: string;
            children?: ReactNode;
        };
    }
    namespace Item {
        type Props = {
            title: string;
            keywords?: string[];
            detail?: React.ReactNode;
            icon?: ImageLike;
            id?: string;
            subtitle?: string;
            actions?: ReactNode;
            accessories?: List.Item.Accessory[];
        };
        namespace Detail {
            type Props = {
                isLoading?: boolean;
                markdown?: string;
                metadata?: React.ReactNode;
            };
        }
        type AccessoryBase = string | Date | undefined | null;
        type Tag = AccessoryBase | {
            color: ColorLike;
            value: string | Date | undefined | null;
        };
        type Text = AccessoryBase | {
            color: Color;
            value: string | Date | undefined | null;
        };
        type Accessory = ({
            tag?: Tag;
        } | {
            text?: Text;
        }) & {
            icon?: Image.ImageLike;
            tooltip?: string | null;
        };
    }
}
export declare const List: React.FC<List.Props> & {
    Section: React.FC<List.Section.Props>;
    EmptyView: React.FC<import("./empty-view").EmptyViewProps>;
    Dropdown: React.FC<{
        tooltip?: string;
        children?: ReactNode;
        defaultValue?: string;
        filtering?: boolean;
        id?: string;
        isLoading?: boolean;
        placeholder?: string;
        storeValue?: boolean;
        throttle?: boolean;
        value?: string;
        onChange?: (newValue: string) => void;
        onSearchTextChange?: (text: string) => void;
    }> & {
        Item: React.FC<{
            title: string;
            value: string;
            icon?: Image.ImageLike;
            keywords?: string[];
        }>;
        Section: React.FC<{
            title?: string;
            children?: ReactNode;
        }>;
    };
    Item: React.FC<List.Item.Props> & {
        Detail: React.FC<List.Item.Detail.Props> & {
            Metadata: React.FC<import("./metadata").MetadataProps> & {
                Label: React.FC<import("./metadata").ListItemDetailMetadataLabelProps>;
                Separator: React.FC<{}>;
                TagList: React.FC<import("./tag").TagListProps> & {
                    Item: React.FC<import("./tag").TagItemProps>;
                };
                Link: React.FC<{
                    title: string;
                    target: string;
                    text: string;
                }>;
            };
        };
    };
};
