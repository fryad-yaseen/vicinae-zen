"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.popToRoot = exports.getSelectedText = exports.clearSearchBar = exports.closeMainWindow = exports.showHUD = exports.PopToRootType = void 0;
const bus_1 = require("./bus");
const ui = __importStar(require("./proto/ui"));
//e
var PopToRootType;
(function (PopToRootType) {
    /**
     * Translates to Immediate or Suspended depending on the
     * user configuration.
     */
    PopToRootType["Default"] = "default";
    /**
     * Immediately pop to root
     */
    PopToRootType["Immediate"] = "immediate";
    /**
     * Do not pop to root, preserve the navigation state as it is
     */
    PopToRootType["Suspended"] = "suspended";
})(PopToRootType || (exports.PopToRootType = PopToRootType = {}));
const popToRootProtoMap = {
    [PopToRootType.Default]: ui.PopToRootType.PopToRootDefault,
    [PopToRootType.Immediate]: ui.PopToRootType.PopToRootImmediate,
    [PopToRootType.Suspended]: ui.PopToRootType.PopToRootSuspended,
};
/**
 * Close the window and show a small HUD where the window was previously opened.
 * Note that the HUD may not be shown in some environments.
 * Similarly to `closeWindow`, it is possible to override the pop to root behavior directly
 * by passing options to this function.
 *
 * @see closeWindow
 */
const showHUD = async (title, options) => {
    bus_1.bus.turboRequest('ui.showHud', {
        text: title,
        clearRootSearch: options?.clearRootSearch ?? false,
        popToRoot: popToRootProtoMap[options?.popToRootType ?? PopToRootType.Default]
    });
};
exports.showHUD = showHUD;
/**
 * Close the vicinae launcher window immediately.
 * It is possible to override the `popToRoot` behavior defined in the settings using the options object.
 */
const closeMainWindow = async (options = {}) => {
    const { clearRootSearch = false, popToRootType = PopToRootType.Default } = options;
    await bus_1.bus.turboRequest("ui.closeMainWindow", {
        clearRootSearch,
        popToRoot: popToRootProtoMap[popToRootType]
    });
};
exports.closeMainWindow = closeMainWindow;
const clearSearchBar = async () => {
    await bus_1.bus.turboRequest("ui.setSearchText", { text: "" });
};
exports.clearSearchBar = clearSearchBar;
/**
 * Get the text that is currently selected by the user.
 * How this is implemented depends on the environment but all it does is usually
 * read the clipboard's primary selection buffer.
 */
const getSelectedText = async () => {
    const response = await bus_1.bus.turboRequest("ui.getSelectedText", {});
    if (!response.ok) {
        throw new Error(`Failed to get selected text`);
    }
    return response.value.text;
};
exports.getSelectedText = getSelectedText;
/**
 * Pop to the root of the navigation stack, optionally clearing the search bar.
 */
const popToRoot = async (options) => {
    await bus_1.bus.turboRequest('ui.popToRoot', { clearSearchBar: options?.clearSearchBar ?? false });
};
exports.popToRoot = popToRoot;
