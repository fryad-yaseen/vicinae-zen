"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeProtoImage = exports.Image = void 0;
const ui = __importStar(require("./proto/ui"));
var Image;
(function (Image) {
    let Mask;
    (function (Mask) {
        Mask["Circle"] = "circle";
        Mask["RoundedRectangle"] = "roundedRectangle";
    })(Mask = Image.Mask || (Image.Mask = {}));
})(Image || (exports.Image = Image = {}));
const maskMap = {
    [Image.Mask.Circle]: ui.ImageMask.Circle,
    [Image.Mask.RoundedRectangle]: ui.ImageMask.RoundedRectangle,
};
const serializeProtoImage = (image) => {
    const serializeSource = (payload) => {
        if (typeof payload === "object") {
            const tmp = payload;
            return {
                themed: { light: tmp.light.toString(), dark: tmp.dark.toString() },
            };
        }
        return { raw: payload.toString() };
    };
    if (image instanceof URL || typeof image === "string") {
        return { source: { raw: image.toString() } };
    }
    const proto = ui.Image.create();
    const img = image;
    proto.source = serializeSource(img.source);
    if (img.fallback) {
        proto.fallback = serializeSource(img.fallback);
    }
    if (img.mask) {
        proto.mask = maskMap[img.mask];
    }
    return proto;
};
exports.serializeProtoImage = serializeProtoImage;
