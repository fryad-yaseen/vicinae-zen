"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: application.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = exports.Response = exports.Request = exports.GetDefaultApplicationResponse = exports.GetDefaultApplicationRequest = exports.ListApplicationResponse = exports.ListApplicationRequest = exports.OpenApplicationRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const common_1 = require("./common");
exports.protobufPackage = "proto.ext.application";
function createBaseOpenApplicationRequest() {
    return { target: "", appId: undefined };
}
exports.OpenApplicationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.target !== "") {
            writer.uint32(10).string(message.target);
        }
        if (message.appId !== undefined) {
            writer.uint32(18).string(message.appId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOpenApplicationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.target = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            target: isSet(object.target) ? globalThis.String(object.target) : "",
            appId: isSet(object.appId) ? globalThis.String(object.appId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.target !== "") {
            obj.target = message.target;
        }
        if (message.appId !== undefined) {
            obj.appId = message.appId;
        }
        return obj;
    },
    create(base) {
        return exports.OpenApplicationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOpenApplicationRequest();
        message.target = object.target ?? "";
        message.appId = object.appId ?? undefined;
        return message;
    },
};
function createBaseListApplicationRequest() {
    return { target: undefined };
}
exports.ListApplicationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.target !== undefined) {
            writer.uint32(10).string(message.target);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListApplicationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.target = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { target: isSet(object.target) ? globalThis.String(object.target) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.target !== undefined) {
            obj.target = message.target;
        }
        return obj;
    },
    create(base) {
        return exports.ListApplicationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListApplicationRequest();
        message.target = object.target ?? undefined;
        return message;
    },
};
function createBaseListApplicationResponse() {
    return { apps: [] };
}
exports.ListApplicationResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.apps) {
            exports.Application.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListApplicationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.apps.push(exports.Application.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { apps: globalThis.Array.isArray(object?.apps) ? object.apps.map((e) => exports.Application.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.apps?.length) {
            obj.apps = message.apps.map((e) => exports.Application.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListApplicationResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListApplicationResponse();
        message.apps = object.apps?.map((e) => exports.Application.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetDefaultApplicationRequest() {
    return { target: "" };
}
exports.GetDefaultApplicationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.target !== "") {
            writer.uint32(10).string(message.target);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultApplicationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.target = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { target: isSet(object.target) ? globalThis.String(object.target) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.target !== "") {
            obj.target = message.target;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultApplicationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultApplicationRequest();
        message.target = object.target ?? "";
        return message;
    },
};
function createBaseGetDefaultApplicationResponse() {
    return { app: undefined };
}
exports.GetDefaultApplicationResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.app !== undefined) {
            exports.Application.encode(message.app, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultApplicationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.app = exports.Application.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { app: isSet(object.app) ? exports.Application.fromJSON(object.app) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.app !== undefined) {
            obj.app = exports.Application.toJSON(message.app);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultApplicationResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultApplicationResponse();
        message.app = (object.app !== undefined && object.app !== null) ? exports.Application.fromPartial(object.app) : undefined;
        return message;
    },
};
function createBaseRequest() {
    return { list: undefined, open: undefined, getDefault: undefined };
}
exports.Request = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.list !== undefined) {
            exports.ListApplicationRequest.encode(message.list, writer.uint32(10).fork()).join();
        }
        if (message.open !== undefined) {
            exports.OpenApplicationRequest.encode(message.open, writer.uint32(18).fork()).join();
        }
        if (message.getDefault !== undefined) {
            exports.GetDefaultApplicationRequest.encode(message.getDefault, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.list = exports.ListApplicationRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.open = exports.OpenApplicationRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.getDefault = exports.GetDefaultApplicationRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            list: isSet(object.list) ? exports.ListApplicationRequest.fromJSON(object.list) : undefined,
            open: isSet(object.open) ? exports.OpenApplicationRequest.fromJSON(object.open) : undefined,
            getDefault: isSet(object.getDefault) ? exports.GetDefaultApplicationRequest.fromJSON(object.getDefault) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.list !== undefined) {
            obj.list = exports.ListApplicationRequest.toJSON(message.list);
        }
        if (message.open !== undefined) {
            obj.open = exports.OpenApplicationRequest.toJSON(message.open);
        }
        if (message.getDefault !== undefined) {
            obj.getDefault = exports.GetDefaultApplicationRequest.toJSON(message.getDefault);
        }
        return obj;
    },
    create(base) {
        return exports.Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequest();
        message.list = (object.list !== undefined && object.list !== null)
            ? exports.ListApplicationRequest.fromPartial(object.list)
            : undefined;
        message.open = (object.open !== undefined && object.open !== null)
            ? exports.OpenApplicationRequest.fromPartial(object.open)
            : undefined;
        message.getDefault = (object.getDefault !== undefined && object.getDefault !== null)
            ? exports.GetDefaultApplicationRequest.fromPartial(object.getDefault)
            : undefined;
        return message;
    },
};
function createBaseResponse() {
    return { list: undefined, open: undefined, getDefault: undefined };
}
exports.Response = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.list !== undefined) {
            exports.ListApplicationResponse.encode(message.list, writer.uint32(10).fork()).join();
        }
        if (message.open !== undefined) {
            common_1.AckResponse.encode(message.open, writer.uint32(18).fork()).join();
        }
        if (message.getDefault !== undefined) {
            exports.GetDefaultApplicationResponse.encode(message.getDefault, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.list = exports.ListApplicationResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.open = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.getDefault = exports.GetDefaultApplicationResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            list: isSet(object.list) ? exports.ListApplicationResponse.fromJSON(object.list) : undefined,
            open: isSet(object.open) ? common_1.AckResponse.fromJSON(object.open) : undefined,
            getDefault: isSet(object.getDefault) ? exports.GetDefaultApplicationResponse.fromJSON(object.getDefault) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.list !== undefined) {
            obj.list = exports.ListApplicationResponse.toJSON(message.list);
        }
        if (message.open !== undefined) {
            obj.open = common_1.AckResponse.toJSON(message.open);
        }
        if (message.getDefault !== undefined) {
            obj.getDefault = exports.GetDefaultApplicationResponse.toJSON(message.getDefault);
        }
        return obj;
    },
    create(base) {
        return exports.Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponse();
        message.list = (object.list !== undefined && object.list !== null)
            ? exports.ListApplicationResponse.fromPartial(object.list)
            : undefined;
        message.open = (object.open !== undefined && object.open !== null)
            ? common_1.AckResponse.fromPartial(object.open)
            : undefined;
        message.getDefault = (object.getDefault !== undefined && object.getDefault !== null)
            ? exports.GetDefaultApplicationResponse.fromPartial(object.getDefault)
            : undefined;
        return message;
    },
};
function createBaseApplication() {
    return { id: "", name: "", icon: "", path: "" };
}
exports.Application = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.icon !== "") {
            writer.uint32(26).string(message.icon);
        }
        if (message.path !== "") {
            writer.uint32(34).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApplication();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.icon = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
            path: isSet(object.path) ? globalThis.String(object.path) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.icon !== "") {
            obj.icon = message.icon;
        }
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return exports.Application.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseApplication();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.icon = object.icon ?? "";
        message.path = object.path ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
