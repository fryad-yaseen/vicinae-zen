"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: common.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorResponse = exports.AckResponse = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "proto.ext.common";
function createBaseAckResponse() {
    return {};
}
exports.AckResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAckResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AckResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseAckResponse();
        return message;
    },
};
function createBaseErrorResponse() {
    return { errorText: "" };
}
exports.ErrorResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.errorText !== "") {
            writer.uint32(10).string(message.errorText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseErrorResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.errorText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { errorText: isSet(object.errorText) ? globalThis.String(object.errorText) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.errorText !== "") {
            obj.errorText = message.errorText;
        }
        return obj;
    },
    create(base) {
        return exports.ErrorResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseErrorResponse();
        message.errorText = object.errorText ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
