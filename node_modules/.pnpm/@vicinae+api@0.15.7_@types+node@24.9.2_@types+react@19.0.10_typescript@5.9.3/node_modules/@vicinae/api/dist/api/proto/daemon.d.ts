import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "proto.ext.daemon";
export interface UrlResponse {
    /** empty string if no error */
    error: string;
}
export interface UrlRequest {
    url: string;
}
export interface PingRequest {
}
export interface PingResponse {
}
export interface DmenuRequest {
    rawContent: string;
    navigationTitle: string;
    placeholder: string;
    noIcon: boolean;
    sectionTitle: string;
    noSection: boolean;
}
export interface LaunchAppRequest {
    appId: string;
    args: string[];
    newInstance: boolean;
}
export interface LaunchAppResponse {
    error: string;
    focusedWindowTitle: string;
}
export interface ListAppsRequest {
    withActions: boolean;
}
export interface AppInfo {
    id: string;
    name: string;
    hidden: boolean;
    path: string;
    description: string;
    program: string;
    isTerminalApp: boolean;
    keywords: string[];
    iconUrl: string;
    isAction: boolean;
}
export interface ListAppsResponse {
    apps: AppInfo[];
}
export interface DmenuResponse {
    output: string;
}
export interface Request {
    ping?: PingRequest | undefined;
    url?: UrlRequest | undefined;
    dmenu?: DmenuRequest | undefined;
    launchApp?: LaunchAppRequest | undefined;
    listApps?: ListAppsRequest | undefined;
}
export interface Response {
    ping?: PingResponse | undefined;
    url?: UrlResponse | undefined;
    dmenu?: DmenuResponse | undefined;
    launchApp?: LaunchAppResponse | undefined;
    listApps?: ListAppsResponse | undefined;
}
export declare const UrlResponse: MessageFns<UrlResponse>;
export declare const UrlRequest: MessageFns<UrlRequest>;
export declare const PingRequest: MessageFns<PingRequest>;
export declare const PingResponse: MessageFns<PingResponse>;
export declare const DmenuRequest: MessageFns<DmenuRequest>;
export declare const LaunchAppRequest: MessageFns<LaunchAppRequest>;
export declare const LaunchAppResponse: MessageFns<LaunchAppResponse>;
export declare const ListAppsRequest: MessageFns<ListAppsRequest>;
export declare const AppInfo: MessageFns<AppInfo>;
export declare const ListAppsResponse: MessageFns<ListAppsResponse>;
export declare const DmenuResponse: MessageFns<DmenuResponse>;
export declare const Request: MessageFns<Request>;
export declare const Response: MessageFns<Response>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
