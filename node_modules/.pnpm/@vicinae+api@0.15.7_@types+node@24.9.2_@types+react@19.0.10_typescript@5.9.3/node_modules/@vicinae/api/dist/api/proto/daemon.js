"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: daemon.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Response = exports.Request = exports.DmenuResponse = exports.ListAppsResponse = exports.AppInfo = exports.ListAppsRequest = exports.LaunchAppResponse = exports.LaunchAppRequest = exports.DmenuRequest = exports.PingResponse = exports.PingRequest = exports.UrlRequest = exports.UrlResponse = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "proto.ext.daemon";
function createBaseUrlResponse() {
    return { error: "" };
}
exports.UrlResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUrlResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.UrlResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUrlResponse();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseUrlRequest() {
    return { url: "" };
}
exports.UrlRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUrlRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return exports.UrlRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUrlRequest();
        message.url = object.url ?? "";
        return message;
    },
};
function createBasePingRequest() {
    return {};
}
exports.PingRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.PingRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBasePingRequest();
        return message;
    },
};
function createBasePingResponse() {
    return {};
}
exports.PingResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.PingResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBasePingResponse();
        return message;
    },
};
function createBaseDmenuRequest() {
    return { rawContent: "", navigationTitle: "", placeholder: "", noIcon: false, sectionTitle: "", noSection: false };
}
exports.DmenuRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rawContent !== "") {
            writer.uint32(10).string(message.rawContent);
        }
        if (message.navigationTitle !== "") {
            writer.uint32(18).string(message.navigationTitle);
        }
        if (message.placeholder !== "") {
            writer.uint32(26).string(message.placeholder);
        }
        if (message.noIcon !== false) {
            writer.uint32(32).bool(message.noIcon);
        }
        if (message.sectionTitle !== "") {
            writer.uint32(42).string(message.sectionTitle);
        }
        if (message.noSection !== false) {
            writer.uint32(48).bool(message.noSection);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDmenuRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rawContent = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.navigationTitle = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.placeholder = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.noIcon = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.sectionTitle = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.noSection = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rawContent: isSet(object.rawContent) ? globalThis.String(object.rawContent) : "",
            navigationTitle: isSet(object.navigationTitle) ? globalThis.String(object.navigationTitle) : "",
            placeholder: isSet(object.placeholder) ? globalThis.String(object.placeholder) : "",
            noIcon: isSet(object.noIcon) ? globalThis.Boolean(object.noIcon) : false,
            sectionTitle: isSet(object.sectionTitle) ? globalThis.String(object.sectionTitle) : "",
            noSection: isSet(object.noSection) ? globalThis.Boolean(object.noSection) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rawContent !== "") {
            obj.rawContent = message.rawContent;
        }
        if (message.navigationTitle !== "") {
            obj.navigationTitle = message.navigationTitle;
        }
        if (message.placeholder !== "") {
            obj.placeholder = message.placeholder;
        }
        if (message.noIcon !== false) {
            obj.noIcon = message.noIcon;
        }
        if (message.sectionTitle !== "") {
            obj.sectionTitle = message.sectionTitle;
        }
        if (message.noSection !== false) {
            obj.noSection = message.noSection;
        }
        return obj;
    },
    create(base) {
        return exports.DmenuRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDmenuRequest();
        message.rawContent = object.rawContent ?? "";
        message.navigationTitle = object.navigationTitle ?? "";
        message.placeholder = object.placeholder ?? "";
        message.noIcon = object.noIcon ?? false;
        message.sectionTitle = object.sectionTitle ?? "";
        message.noSection = object.noSection ?? false;
        return message;
    },
};
function createBaseLaunchAppRequest() {
    return { appId: "", args: [], newInstance: false };
}
exports.LaunchAppRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.appId !== "") {
            writer.uint32(10).string(message.appId);
        }
        for (const v of message.args) {
            writer.uint32(18).string(v);
        }
        if (message.newInstance !== false) {
            writer.uint32(24).bool(message.newInstance);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLaunchAppRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.args.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.newInstance = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
            args: globalThis.Array.isArray(object?.args) ? object.args.map((e) => globalThis.String(e)) : [],
            newInstance: isSet(object.newInstance) ? globalThis.Boolean(object.newInstance) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appId !== "") {
            obj.appId = message.appId;
        }
        if (message.args?.length) {
            obj.args = message.args;
        }
        if (message.newInstance !== false) {
            obj.newInstance = message.newInstance;
        }
        return obj;
    },
    create(base) {
        return exports.LaunchAppRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLaunchAppRequest();
        message.appId = object.appId ?? "";
        message.args = object.args?.map((e) => e) || [];
        message.newInstance = object.newInstance ?? false;
        return message;
    },
};
function createBaseLaunchAppResponse() {
    return { error: "", focusedWindowTitle: "" };
}
exports.LaunchAppResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        if (message.focusedWindowTitle !== "") {
            writer.uint32(18).string(message.focusedWindowTitle);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLaunchAppResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.focusedWindowTitle = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            error: isSet(object.error) ? globalThis.String(object.error) : "",
            focusedWindowTitle: isSet(object.focusedWindowTitle) ? globalThis.String(object.focusedWindowTitle) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        if (message.focusedWindowTitle !== "") {
            obj.focusedWindowTitle = message.focusedWindowTitle;
        }
        return obj;
    },
    create(base) {
        return exports.LaunchAppResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLaunchAppResponse();
        message.error = object.error ?? "";
        message.focusedWindowTitle = object.focusedWindowTitle ?? "";
        return message;
    },
};
function createBaseListAppsRequest() {
    return { withActions: false };
}
exports.ListAppsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.withActions !== false) {
            writer.uint32(8).bool(message.withActions);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAppsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.withActions = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { withActions: isSet(object.withActions) ? globalThis.Boolean(object.withActions) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.withActions !== false) {
            obj.withActions = message.withActions;
        }
        return obj;
    },
    create(base) {
        return exports.ListAppsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListAppsRequest();
        message.withActions = object.withActions ?? false;
        return message;
    },
};
function createBaseAppInfo() {
    return {
        id: "",
        name: "",
        hidden: false,
        path: "",
        description: "",
        program: "",
        isTerminalApp: false,
        keywords: [],
        iconUrl: "",
        isAction: false,
    };
}
exports.AppInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.hidden !== false) {
            writer.uint32(24).bool(message.hidden);
        }
        if (message.path !== "") {
            writer.uint32(34).string(message.path);
        }
        if (message.description !== "") {
            writer.uint32(42).string(message.description);
        }
        if (message.program !== "") {
            writer.uint32(50).string(message.program);
        }
        if (message.isTerminalApp !== false) {
            writer.uint32(56).bool(message.isTerminalApp);
        }
        for (const v of message.keywords) {
            writer.uint32(66).string(v);
        }
        if (message.iconUrl !== "") {
            writer.uint32(74).string(message.iconUrl);
        }
        if (message.isAction !== false) {
            writer.uint32(80).bool(message.isAction);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.hidden = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.program = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.isTerminalApp = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.keywords.push(reader.string());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.iconUrl = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.isAction = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            hidden: isSet(object.hidden) ? globalThis.Boolean(object.hidden) : false,
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            program: isSet(object.program) ? globalThis.String(object.program) : "",
            isTerminalApp: isSet(object.isTerminalApp) ? globalThis.Boolean(object.isTerminalApp) : false,
            keywords: globalThis.Array.isArray(object?.keywords) ? object.keywords.map((e) => globalThis.String(e)) : [],
            iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : "",
            isAction: isSet(object.isAction) ? globalThis.Boolean(object.isAction) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.hidden !== false) {
            obj.hidden = message.hidden;
        }
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.program !== "") {
            obj.program = message.program;
        }
        if (message.isTerminalApp !== false) {
            obj.isTerminalApp = message.isTerminalApp;
        }
        if (message.keywords?.length) {
            obj.keywords = message.keywords;
        }
        if (message.iconUrl !== "") {
            obj.iconUrl = message.iconUrl;
        }
        if (message.isAction !== false) {
            obj.isAction = message.isAction;
        }
        return obj;
    },
    create(base) {
        return exports.AppInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppInfo();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.hidden = object.hidden ?? false;
        message.path = object.path ?? "";
        message.description = object.description ?? "";
        message.program = object.program ?? "";
        message.isTerminalApp = object.isTerminalApp ?? false;
        message.keywords = object.keywords?.map((e) => e) || [];
        message.iconUrl = object.iconUrl ?? "";
        message.isAction = object.isAction ?? false;
        return message;
    },
};
function createBaseListAppsResponse() {
    return { apps: [] };
}
exports.ListAppsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.apps) {
            exports.AppInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAppsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.apps.push(exports.AppInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { apps: globalThis.Array.isArray(object?.apps) ? object.apps.map((e) => exports.AppInfo.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.apps?.length) {
            obj.apps = message.apps.map((e) => exports.AppInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListAppsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListAppsResponse();
        message.apps = object.apps?.map((e) => exports.AppInfo.fromPartial(e)) || [];
        return message;
    },
};
function createBaseDmenuResponse() {
    return { output: "" };
}
exports.DmenuResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.output !== "") {
            writer.uint32(10).string(message.output);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDmenuResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.output = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { output: isSet(object.output) ? globalThis.String(object.output) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.output !== "") {
            obj.output = message.output;
        }
        return obj;
    },
    create(base) {
        return exports.DmenuResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDmenuResponse();
        message.output = object.output ?? "";
        return message;
    },
};
function createBaseRequest() {
    return { ping: undefined, url: undefined, dmenu: undefined, launchApp: undefined, listApps: undefined };
}
exports.Request = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ping !== undefined) {
            exports.PingRequest.encode(message.ping, writer.uint32(10).fork()).join();
        }
        if (message.url !== undefined) {
            exports.UrlRequest.encode(message.url, writer.uint32(18).fork()).join();
        }
        if (message.dmenu !== undefined) {
            exports.DmenuRequest.encode(message.dmenu, writer.uint32(26).fork()).join();
        }
        if (message.launchApp !== undefined) {
            exports.LaunchAppRequest.encode(message.launchApp, writer.uint32(34).fork()).join();
        }
        if (message.listApps !== undefined) {
            exports.ListAppsRequest.encode(message.listApps, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ping = exports.PingRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.url = exports.UrlRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.dmenu = exports.DmenuRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.launchApp = exports.LaunchAppRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.listApps = exports.ListAppsRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ping: isSet(object.ping) ? exports.PingRequest.fromJSON(object.ping) : undefined,
            url: isSet(object.url) ? exports.UrlRequest.fromJSON(object.url) : undefined,
            dmenu: isSet(object.dmenu) ? exports.DmenuRequest.fromJSON(object.dmenu) : undefined,
            launchApp: isSet(object.launchApp) ? exports.LaunchAppRequest.fromJSON(object.launchApp) : undefined,
            listApps: isSet(object.listApps) ? exports.ListAppsRequest.fromJSON(object.listApps) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ping !== undefined) {
            obj.ping = exports.PingRequest.toJSON(message.ping);
        }
        if (message.url !== undefined) {
            obj.url = exports.UrlRequest.toJSON(message.url);
        }
        if (message.dmenu !== undefined) {
            obj.dmenu = exports.DmenuRequest.toJSON(message.dmenu);
        }
        if (message.launchApp !== undefined) {
            obj.launchApp = exports.LaunchAppRequest.toJSON(message.launchApp);
        }
        if (message.listApps !== undefined) {
            obj.listApps = exports.ListAppsRequest.toJSON(message.listApps);
        }
        return obj;
    },
    create(base) {
        return exports.Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequest();
        message.ping = (object.ping !== undefined && object.ping !== null)
            ? exports.PingRequest.fromPartial(object.ping)
            : undefined;
        message.url = (object.url !== undefined && object.url !== null) ? exports.UrlRequest.fromPartial(object.url) : undefined;
        message.dmenu = (object.dmenu !== undefined && object.dmenu !== null)
            ? exports.DmenuRequest.fromPartial(object.dmenu)
            : undefined;
        message.launchApp = (object.launchApp !== undefined && object.launchApp !== null)
            ? exports.LaunchAppRequest.fromPartial(object.launchApp)
            : undefined;
        message.listApps = (object.listApps !== undefined && object.listApps !== null)
            ? exports.ListAppsRequest.fromPartial(object.listApps)
            : undefined;
        return message;
    },
};
function createBaseResponse() {
    return { ping: undefined, url: undefined, dmenu: undefined, launchApp: undefined, listApps: undefined };
}
exports.Response = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ping !== undefined) {
            exports.PingResponse.encode(message.ping, writer.uint32(10).fork()).join();
        }
        if (message.url !== undefined) {
            exports.UrlResponse.encode(message.url, writer.uint32(18).fork()).join();
        }
        if (message.dmenu !== undefined) {
            exports.DmenuResponse.encode(message.dmenu, writer.uint32(26).fork()).join();
        }
        if (message.launchApp !== undefined) {
            exports.LaunchAppResponse.encode(message.launchApp, writer.uint32(34).fork()).join();
        }
        if (message.listApps !== undefined) {
            exports.ListAppsResponse.encode(message.listApps, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ping = exports.PingResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.url = exports.UrlResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.dmenu = exports.DmenuResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.launchApp = exports.LaunchAppResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.listApps = exports.ListAppsResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ping: isSet(object.ping) ? exports.PingResponse.fromJSON(object.ping) : undefined,
            url: isSet(object.url) ? exports.UrlResponse.fromJSON(object.url) : undefined,
            dmenu: isSet(object.dmenu) ? exports.DmenuResponse.fromJSON(object.dmenu) : undefined,
            launchApp: isSet(object.launchApp) ? exports.LaunchAppResponse.fromJSON(object.launchApp) : undefined,
            listApps: isSet(object.listApps) ? exports.ListAppsResponse.fromJSON(object.listApps) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ping !== undefined) {
            obj.ping = exports.PingResponse.toJSON(message.ping);
        }
        if (message.url !== undefined) {
            obj.url = exports.UrlResponse.toJSON(message.url);
        }
        if (message.dmenu !== undefined) {
            obj.dmenu = exports.DmenuResponse.toJSON(message.dmenu);
        }
        if (message.launchApp !== undefined) {
            obj.launchApp = exports.LaunchAppResponse.toJSON(message.launchApp);
        }
        if (message.listApps !== undefined) {
            obj.listApps = exports.ListAppsResponse.toJSON(message.listApps);
        }
        return obj;
    },
    create(base) {
        return exports.Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponse();
        message.ping = (object.ping !== undefined && object.ping !== null)
            ? exports.PingResponse.fromPartial(object.ping)
            : undefined;
        message.url = (object.url !== undefined && object.url !== null) ? exports.UrlResponse.fromPartial(object.url) : undefined;
        message.dmenu = (object.dmenu !== undefined && object.dmenu !== null)
            ? exports.DmenuResponse.fromPartial(object.dmenu)
            : undefined;
        message.launchApp = (object.launchApp !== undefined && object.launchApp !== null)
            ? exports.LaunchAppResponse.fromPartial(object.launchApp)
            : undefined;
        message.listApps = (object.listApps !== undefined && object.listApps !== null)
            ? exports.ListAppsResponse.fromPartial(object.listApps)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
