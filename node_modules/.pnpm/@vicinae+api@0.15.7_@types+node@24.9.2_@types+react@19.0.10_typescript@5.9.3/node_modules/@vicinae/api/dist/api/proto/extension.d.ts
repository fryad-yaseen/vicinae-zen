import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Request as Request2, Response as Response9 } from "./application";
import { Request as Request3, Response as Response10 } from "./clipboard";
import { ErrorResponse } from "./common";
import { Request as Request6, Response as Response13 } from "./file-search";
import { Request as Request5, Response as Response12 } from "./oauth";
import { Request as Request4, Response as Response11 } from "./storage";
import { Request as Request1, Response as Response8 } from "./ui";
import { Request as Request7, Response as Response14 } from "./wm";
export declare const protobufPackage = "proto.ext.extension";
export interface Request {
    requestId: string;
    data: RequestData | undefined;
}
export interface RequestData {
    ui?: Request1 | undefined;
    app?: Request2 | undefined;
    clipboard?: Request3 | undefined;
    storage?: Request4 | undefined;
    oauth?: Request5 | undefined;
    fileSearch?: Request6 | undefined;
    wm?: Request7 | undefined;
}
export interface Response {
    requestId: string;
    data?: ResponseData | undefined;
    error?: ErrorResponse | undefined;
}
export interface ResponseData {
    ui?: Response8 | undefined;
    app?: Response9 | undefined;
    clipboard?: Response10 | undefined;
    storage?: Response11 | undefined;
    oauth?: Response12 | undefined;
    fileSearch?: Response13 | undefined;
    wm?: Response14 | undefined;
}
export interface Event {
    id: string;
    generic?: GenericEventData | undefined;
    crash?: CrashEventData | undefined;
}
export interface CrashEventData {
    text: string;
}
export interface GenericEventData {
    json: string;
}
export declare const Request: MessageFns<Request>;
export declare const RequestData: MessageFns<RequestData>;
export declare const Response: MessageFns<Response>;
export declare const ResponseData: MessageFns<ResponseData>;
export declare const Event: MessageFns<Event>;
export declare const CrashEventData: MessageFns<CrashEventData>;
export declare const GenericEventData: MessageFns<GenericEventData>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
