"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: extension.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericEventData = exports.CrashEventData = exports.Event = exports.ResponseData = exports.Response = exports.RequestData = exports.Request = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const application_1 = require("./application");
const clipboard_1 = require("./clipboard");
const common_1 = require("./common");
const file_search_1 = require("./file-search");
const oauth_1 = require("./oauth");
const storage_1 = require("./storage");
const ui_1 = require("./ui");
const wm_1 = require("./wm");
exports.protobufPackage = "proto.ext.extension";
function createBaseRequest() {
    return { requestId: "", data: undefined };
}
exports.Request = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.data !== undefined) {
            exports.RequestData.encode(message.data, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = exports.RequestData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            data: isSet(object.data) ? exports.RequestData.fromJSON(object.data) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.data !== undefined) {
            obj.data = exports.RequestData.toJSON(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequest();
        message.requestId = object.requestId ?? "";
        message.data = (object.data !== undefined && object.data !== null)
            ? exports.RequestData.fromPartial(object.data)
            : undefined;
        return message;
    },
};
function createBaseRequestData() {
    return {
        ui: undefined,
        app: undefined,
        clipboard: undefined,
        storage: undefined,
        oauth: undefined,
        fileSearch: undefined,
        wm: undefined,
    };
}
exports.RequestData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ui !== undefined) {
            ui_1.Request.encode(message.ui, writer.uint32(10).fork()).join();
        }
        if (message.app !== undefined) {
            application_1.Request.encode(message.app, writer.uint32(18).fork()).join();
        }
        if (message.clipboard !== undefined) {
            clipboard_1.Request.encode(message.clipboard, writer.uint32(26).fork()).join();
        }
        if (message.storage !== undefined) {
            storage_1.Request.encode(message.storage, writer.uint32(34).fork()).join();
        }
        if (message.oauth !== undefined) {
            oauth_1.Request.encode(message.oauth, writer.uint32(42).fork()).join();
        }
        if (message.fileSearch !== undefined) {
            file_search_1.Request.encode(message.fileSearch, writer.uint32(50).fork()).join();
        }
        if (message.wm !== undefined) {
            wm_1.Request.encode(message.wm, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ui = ui_1.Request.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.app = application_1.Request.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clipboard = clipboard_1.Request.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.storage = storage_1.Request.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.oauth = oauth_1.Request.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.fileSearch = file_search_1.Request.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.wm = wm_1.Request.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ui: isSet(object.ui) ? ui_1.Request.fromJSON(object.ui) : undefined,
            app: isSet(object.app) ? application_1.Request.fromJSON(object.app) : undefined,
            clipboard: isSet(object.clipboard) ? clipboard_1.Request.fromJSON(object.clipboard) : undefined,
            storage: isSet(object.storage) ? storage_1.Request.fromJSON(object.storage) : undefined,
            oauth: isSet(object.oauth) ? oauth_1.Request.fromJSON(object.oauth) : undefined,
            fileSearch: isSet(object.fileSearch) ? file_search_1.Request.fromJSON(object.fileSearch) : undefined,
            wm: isSet(object.wm) ? wm_1.Request.fromJSON(object.wm) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ui !== undefined) {
            obj.ui = ui_1.Request.toJSON(message.ui);
        }
        if (message.app !== undefined) {
            obj.app = application_1.Request.toJSON(message.app);
        }
        if (message.clipboard !== undefined) {
            obj.clipboard = clipboard_1.Request.toJSON(message.clipboard);
        }
        if (message.storage !== undefined) {
            obj.storage = storage_1.Request.toJSON(message.storage);
        }
        if (message.oauth !== undefined) {
            obj.oauth = oauth_1.Request.toJSON(message.oauth);
        }
        if (message.fileSearch !== undefined) {
            obj.fileSearch = file_search_1.Request.toJSON(message.fileSearch);
        }
        if (message.wm !== undefined) {
            obj.wm = wm_1.Request.toJSON(message.wm);
        }
        return obj;
    },
    create(base) {
        return exports.RequestData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequestData();
        message.ui = (object.ui !== undefined && object.ui !== null) ? ui_1.Request.fromPartial(object.ui) : undefined;
        message.app = (object.app !== undefined && object.app !== null) ? application_1.Request.fromPartial(object.app) : undefined;
        message.clipboard = (object.clipboard !== undefined && object.clipboard !== null)
            ? clipboard_1.Request.fromPartial(object.clipboard)
            : undefined;
        message.storage = (object.storage !== undefined && object.storage !== null)
            ? storage_1.Request.fromPartial(object.storage)
            : undefined;
        message.oauth = (object.oauth !== undefined && object.oauth !== null)
            ? oauth_1.Request.fromPartial(object.oauth)
            : undefined;
        message.fileSearch = (object.fileSearch !== undefined && object.fileSearch !== null)
            ? file_search_1.Request.fromPartial(object.fileSearch)
            : undefined;
        message.wm = (object.wm !== undefined && object.wm !== null) ? wm_1.Request.fromPartial(object.wm) : undefined;
        return message;
    },
};
function createBaseResponse() {
    return { requestId: "", data: undefined, error: undefined };
}
exports.Response = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.data !== undefined) {
            exports.ResponseData.encode(message.data, writer.uint32(18).fork()).join();
        }
        if (message.error !== undefined) {
            common_1.ErrorResponse.encode(message.error, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = exports.ResponseData.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.error = common_1.ErrorResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            data: isSet(object.data) ? exports.ResponseData.fromJSON(object.data) : undefined,
            error: isSet(object.error) ? common_1.ErrorResponse.fromJSON(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.data !== undefined) {
            obj.data = exports.ResponseData.toJSON(message.data);
        }
        if (message.error !== undefined) {
            obj.error = common_1.ErrorResponse.toJSON(message.error);
        }
        return obj;
    },
    create(base) {
        return exports.Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponse();
        message.requestId = object.requestId ?? "";
        message.data = (object.data !== undefined && object.data !== null)
            ? exports.ResponseData.fromPartial(object.data)
            : undefined;
        message.error = (object.error !== undefined && object.error !== null)
            ? common_1.ErrorResponse.fromPartial(object.error)
            : undefined;
        return message;
    },
};
function createBaseResponseData() {
    return {
        ui: undefined,
        app: undefined,
        clipboard: undefined,
        storage: undefined,
        oauth: undefined,
        fileSearch: undefined,
        wm: undefined,
    };
}
exports.ResponseData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ui !== undefined) {
            ui_1.Response.encode(message.ui, writer.uint32(10).fork()).join();
        }
        if (message.app !== undefined) {
            application_1.Response.encode(message.app, writer.uint32(18).fork()).join();
        }
        if (message.clipboard !== undefined) {
            clipboard_1.Response.encode(message.clipboard, writer.uint32(26).fork()).join();
        }
        if (message.storage !== undefined) {
            storage_1.Response.encode(message.storage, writer.uint32(34).fork()).join();
        }
        if (message.oauth !== undefined) {
            oauth_1.Response.encode(message.oauth, writer.uint32(42).fork()).join();
        }
        if (message.fileSearch !== undefined) {
            file_search_1.Response.encode(message.fileSearch, writer.uint32(50).fork()).join();
        }
        if (message.wm !== undefined) {
            wm_1.Response.encode(message.wm, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponseData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ui = ui_1.Response.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.app = application_1.Response.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clipboard = clipboard_1.Response.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.storage = storage_1.Response.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.oauth = oauth_1.Response.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.fileSearch = file_search_1.Response.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.wm = wm_1.Response.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ui: isSet(object.ui) ? ui_1.Response.fromJSON(object.ui) : undefined,
            app: isSet(object.app) ? application_1.Response.fromJSON(object.app) : undefined,
            clipboard: isSet(object.clipboard) ? clipboard_1.Response.fromJSON(object.clipboard) : undefined,
            storage: isSet(object.storage) ? storage_1.Response.fromJSON(object.storage) : undefined,
            oauth: isSet(object.oauth) ? oauth_1.Response.fromJSON(object.oauth) : undefined,
            fileSearch: isSet(object.fileSearch) ? file_search_1.Response.fromJSON(object.fileSearch) : undefined,
            wm: isSet(object.wm) ? wm_1.Response.fromJSON(object.wm) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ui !== undefined) {
            obj.ui = ui_1.Response.toJSON(message.ui);
        }
        if (message.app !== undefined) {
            obj.app = application_1.Response.toJSON(message.app);
        }
        if (message.clipboard !== undefined) {
            obj.clipboard = clipboard_1.Response.toJSON(message.clipboard);
        }
        if (message.storage !== undefined) {
            obj.storage = storage_1.Response.toJSON(message.storage);
        }
        if (message.oauth !== undefined) {
            obj.oauth = oauth_1.Response.toJSON(message.oauth);
        }
        if (message.fileSearch !== undefined) {
            obj.fileSearch = file_search_1.Response.toJSON(message.fileSearch);
        }
        if (message.wm !== undefined) {
            obj.wm = wm_1.Response.toJSON(message.wm);
        }
        return obj;
    },
    create(base) {
        return exports.ResponseData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponseData();
        message.ui = (object.ui !== undefined && object.ui !== null) ? ui_1.Response.fromPartial(object.ui) : undefined;
        message.app = (object.app !== undefined && object.app !== null) ? application_1.Response.fromPartial(object.app) : undefined;
        message.clipboard = (object.clipboard !== undefined && object.clipboard !== null)
            ? clipboard_1.Response.fromPartial(object.clipboard)
            : undefined;
        message.storage = (object.storage !== undefined && object.storage !== null)
            ? storage_1.Response.fromPartial(object.storage)
            : undefined;
        message.oauth = (object.oauth !== undefined && object.oauth !== null)
            ? oauth_1.Response.fromPartial(object.oauth)
            : undefined;
        message.fileSearch = (object.fileSearch !== undefined && object.fileSearch !== null)
            ? file_search_1.Response.fromPartial(object.fileSearch)
            : undefined;
        message.wm = (object.wm !== undefined && object.wm !== null) ? wm_1.Response.fromPartial(object.wm) : undefined;
        return message;
    },
};
function createBaseEvent() {
    return { id: "", generic: undefined, crash: undefined };
}
exports.Event = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.generic !== undefined) {
            exports.GenericEventData.encode(message.generic, writer.uint32(18).fork()).join();
        }
        if (message.crash !== undefined) {
            exports.CrashEventData.encode(message.crash, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.generic = exports.GenericEventData.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.crash = exports.CrashEventData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            generic: isSet(object.generic) ? exports.GenericEventData.fromJSON(object.generic) : undefined,
            crash: isSet(object.crash) ? exports.CrashEventData.fromJSON(object.crash) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.generic !== undefined) {
            obj.generic = exports.GenericEventData.toJSON(message.generic);
        }
        if (message.crash !== undefined) {
            obj.crash = exports.CrashEventData.toJSON(message.crash);
        }
        return obj;
    },
    create(base) {
        return exports.Event.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEvent();
        message.id = object.id ?? "";
        message.generic = (object.generic !== undefined && object.generic !== null)
            ? exports.GenericEventData.fromPartial(object.generic)
            : undefined;
        message.crash = (object.crash !== undefined && object.crash !== null)
            ? exports.CrashEventData.fromPartial(object.crash)
            : undefined;
        return message;
    },
};
function createBaseCrashEventData() {
    return { text: "" };
}
exports.CrashEventData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCrashEventData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return exports.CrashEventData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCrashEventData();
        message.text = object.text ?? "";
        return message;
    },
};
function createBaseGenericEventData() {
    return { json: "" };
}
exports.GenericEventData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.json !== "") {
            writer.uint32(10).string(message.json);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenericEventData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.json = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { json: isSet(object.json) ? globalThis.String(object.json) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.json !== "") {
            obj.json = message.json;
        }
        return obj;
    },
    create(base) {
        return exports.GenericEventData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenericEventData();
        message.json = object.json ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
