"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: file-search.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Response = exports.Request = exports.SearchResponse = exports.FileInfo = exports.SearchRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "proto.ext.file_search";
function createBaseSearchRequest() {
    return { query: "" };
}
exports.SearchRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== "") {
            writer.uint32(10).string(message.query);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? globalThis.String(object.query) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== "") {
            obj.query = message.query;
        }
        return obj;
    },
    create(base) {
        return exports.SearchRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSearchRequest();
        message.query = object.query ?? "";
        return message;
    },
};
function createBaseFileInfo() {
    return { path: "", mimeType: "" };
}
exports.FileInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        if (message.mimeType !== "") {
            writer.uint32(18).string(message.mimeType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFileInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.mimeType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.mimeType !== "") {
            obj.mimeType = message.mimeType;
        }
        return obj;
    },
    create(base) {
        return exports.FileInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFileInfo();
        message.path = object.path ?? "";
        message.mimeType = object.mimeType ?? "";
        return message;
    },
};
function createBaseSearchResponse() {
    return { files: [] };
}
exports.SearchResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.files) {
            exports.FileInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.files.push(exports.FileInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { files: globalThis.Array.isArray(object?.files) ? object.files.map((e) => exports.FileInfo.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.files?.length) {
            obj.files = message.files.map((e) => exports.FileInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.SearchResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSearchResponse();
        message.files = object.files?.map((e) => exports.FileInfo.fromPartial(e)) || [];
        return message;
    },
};
function createBaseRequest() {
    return { search: undefined };
}
exports.Request = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.search !== undefined) {
            exports.SearchRequest.encode(message.search, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.search = exports.SearchRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { search: isSet(object.search) ? exports.SearchRequest.fromJSON(object.search) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.search !== undefined) {
            obj.search = exports.SearchRequest.toJSON(message.search);
        }
        return obj;
    },
    create(base) {
        return exports.Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequest();
        message.search = (object.search !== undefined && object.search !== null)
            ? exports.SearchRequest.fromPartial(object.search)
            : undefined;
        return message;
    },
};
function createBaseResponse() {
    return { search: undefined };
}
exports.Response = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.search !== undefined) {
            exports.SearchResponse.encode(message.search, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.search = exports.SearchResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { search: isSet(object.search) ? exports.SearchResponse.fromJSON(object.search) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.search !== undefined) {
            obj.search = exports.SearchResponse.toJSON(message.search);
        }
        return obj;
    },
    create(base) {
        return exports.Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponse();
        message.search = (object.search !== undefined && object.search !== null)
            ? exports.SearchResponse.fromPartial(object.search)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
