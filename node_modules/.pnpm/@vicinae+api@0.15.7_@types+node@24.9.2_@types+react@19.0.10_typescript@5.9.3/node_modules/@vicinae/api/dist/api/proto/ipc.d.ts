import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ErrorResponse } from "./common";
import { Event, Request, Response } from "./extension";
import { RequestData, ResponseData } from "./manager";
export declare const protobufPackage = "proto.ext";
export interface IpcMessage {
    extensionRequest?: QualifiedExtensionRequest | undefined;
    extensionResponse?: QualifiedExtensionResponse | undefined;
    extensionEvent?: QualifiedExtensionEvent | undefined;
    managerRequest?: ManagerRequest | undefined;
    managerResponse?: ManagerResponse | undefined;
}
export interface ManagerRequest {
    requestId: string;
    payload: RequestData | undefined;
}
export interface ManagerResponse {
    requestId: string;
    value?: ResponseData | undefined;
    error?: ErrorResponse | undefined;
}
export interface QualifiedExtensionRequest {
    sessionId: string;
    request: Request | undefined;
}
export interface QualifiedExtensionResponse {
    sessionId: string;
    response: Response | undefined;
}
export interface QualifiedExtensionEvent {
    sessionId: string;
    event: Event | undefined;
}
export interface ExtensionMessage {
    request?: Request | undefined;
    response?: Response | undefined;
    event?: Event | undefined;
}
export declare const IpcMessage: MessageFns<IpcMessage>;
export declare const ManagerRequest: MessageFns<ManagerRequest>;
export declare const ManagerResponse: MessageFns<ManagerResponse>;
export declare const QualifiedExtensionRequest: MessageFns<QualifiedExtensionRequest>;
export declare const QualifiedExtensionResponse: MessageFns<QualifiedExtensionResponse>;
export declare const QualifiedExtensionEvent: MessageFns<QualifiedExtensionEvent>;
export declare const ExtensionMessage: MessageFns<ExtensionMessage>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
