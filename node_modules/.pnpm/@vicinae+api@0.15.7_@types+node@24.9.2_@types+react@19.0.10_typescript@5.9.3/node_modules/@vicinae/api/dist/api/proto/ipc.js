"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: ipc.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtensionMessage = exports.QualifiedExtensionEvent = exports.QualifiedExtensionResponse = exports.QualifiedExtensionRequest = exports.ManagerResponse = exports.ManagerRequest = exports.IpcMessage = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const common_1 = require("./common");
const extension_1 = require("./extension");
const manager_1 = require("./manager");
exports.protobufPackage = "proto.ext";
function createBaseIpcMessage() {
    return {
        extensionRequest: undefined,
        extensionResponse: undefined,
        extensionEvent: undefined,
        managerRequest: undefined,
        managerResponse: undefined,
    };
}
exports.IpcMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.extensionRequest !== undefined) {
            exports.QualifiedExtensionRequest.encode(message.extensionRequest, writer.uint32(10).fork()).join();
        }
        if (message.extensionResponse !== undefined) {
            exports.QualifiedExtensionResponse.encode(message.extensionResponse, writer.uint32(18).fork()).join();
        }
        if (message.extensionEvent !== undefined) {
            exports.QualifiedExtensionEvent.encode(message.extensionEvent, writer.uint32(26).fork()).join();
        }
        if (message.managerRequest !== undefined) {
            exports.ManagerRequest.encode(message.managerRequest, writer.uint32(34).fork()).join();
        }
        if (message.managerResponse !== undefined) {
            exports.ManagerResponse.encode(message.managerResponse, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIpcMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.extensionRequest = exports.QualifiedExtensionRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.extensionResponse = exports.QualifiedExtensionResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.extensionEvent = exports.QualifiedExtensionEvent.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.managerRequest = exports.ManagerRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.managerResponse = exports.ManagerResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            extensionRequest: isSet(object.extensionRequest)
                ? exports.QualifiedExtensionRequest.fromJSON(object.extensionRequest)
                : undefined,
            extensionResponse: isSet(object.extensionResponse)
                ? exports.QualifiedExtensionResponse.fromJSON(object.extensionResponse)
                : undefined,
            extensionEvent: isSet(object.extensionEvent)
                ? exports.QualifiedExtensionEvent.fromJSON(object.extensionEvent)
                : undefined,
            managerRequest: isSet(object.managerRequest) ? exports.ManagerRequest.fromJSON(object.managerRequest) : undefined,
            managerResponse: isSet(object.managerResponse) ? exports.ManagerResponse.fromJSON(object.managerResponse) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.extensionRequest !== undefined) {
            obj.extensionRequest = exports.QualifiedExtensionRequest.toJSON(message.extensionRequest);
        }
        if (message.extensionResponse !== undefined) {
            obj.extensionResponse = exports.QualifiedExtensionResponse.toJSON(message.extensionResponse);
        }
        if (message.extensionEvent !== undefined) {
            obj.extensionEvent = exports.QualifiedExtensionEvent.toJSON(message.extensionEvent);
        }
        if (message.managerRequest !== undefined) {
            obj.managerRequest = exports.ManagerRequest.toJSON(message.managerRequest);
        }
        if (message.managerResponse !== undefined) {
            obj.managerResponse = exports.ManagerResponse.toJSON(message.managerResponse);
        }
        return obj;
    },
    create(base) {
        return exports.IpcMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIpcMessage();
        message.extensionRequest = (object.extensionRequest !== undefined && object.extensionRequest !== null)
            ? exports.QualifiedExtensionRequest.fromPartial(object.extensionRequest)
            : undefined;
        message.extensionResponse = (object.extensionResponse !== undefined && object.extensionResponse !== null)
            ? exports.QualifiedExtensionResponse.fromPartial(object.extensionResponse)
            : undefined;
        message.extensionEvent = (object.extensionEvent !== undefined && object.extensionEvent !== null)
            ? exports.QualifiedExtensionEvent.fromPartial(object.extensionEvent)
            : undefined;
        message.managerRequest = (object.managerRequest !== undefined && object.managerRequest !== null)
            ? exports.ManagerRequest.fromPartial(object.managerRequest)
            : undefined;
        message.managerResponse = (object.managerResponse !== undefined && object.managerResponse !== null)
            ? exports.ManagerResponse.fromPartial(object.managerResponse)
            : undefined;
        return message;
    },
};
function createBaseManagerRequest() {
    return { requestId: "", payload: undefined };
}
exports.ManagerRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.payload !== undefined) {
            manager_1.RequestData.encode(message.payload, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseManagerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.payload = manager_1.RequestData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            payload: isSet(object.payload) ? manager_1.RequestData.fromJSON(object.payload) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.payload !== undefined) {
            obj.payload = manager_1.RequestData.toJSON(message.payload);
        }
        return obj;
    },
    create(base) {
        return exports.ManagerRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseManagerRequest();
        message.requestId = object.requestId ?? "";
        message.payload = (object.payload !== undefined && object.payload !== null)
            ? manager_1.RequestData.fromPartial(object.payload)
            : undefined;
        return message;
    },
};
function createBaseManagerResponse() {
    return { requestId: "", value: undefined, error: undefined };
}
exports.ManagerResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.value !== undefined) {
            manager_1.ResponseData.encode(message.value, writer.uint32(18).fork()).join();
        }
        if (message.error !== undefined) {
            common_1.ErrorResponse.encode(message.error, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseManagerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = manager_1.ResponseData.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.error = common_1.ErrorResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            value: isSet(object.value) ? manager_1.ResponseData.fromJSON(object.value) : undefined,
            error: isSet(object.error) ? common_1.ErrorResponse.fromJSON(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.value !== undefined) {
            obj.value = manager_1.ResponseData.toJSON(message.value);
        }
        if (message.error !== undefined) {
            obj.error = common_1.ErrorResponse.toJSON(message.error);
        }
        return obj;
    },
    create(base) {
        return exports.ManagerResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseManagerResponse();
        message.requestId = object.requestId ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? manager_1.ResponseData.fromPartial(object.value)
            : undefined;
        message.error = (object.error !== undefined && object.error !== null)
            ? common_1.ErrorResponse.fromPartial(object.error)
            : undefined;
        return message;
    },
};
function createBaseQualifiedExtensionRequest() {
    return { sessionId: "", request: undefined };
}
exports.QualifiedExtensionRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sessionId !== "") {
            writer.uint32(10).string(message.sessionId);
        }
        if (message.request !== undefined) {
            extension_1.Request.encode(message.request, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQualifiedExtensionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.request = extension_1.Request.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
            request: isSet(object.request) ? extension_1.Request.fromJSON(object.request) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sessionId !== "") {
            obj.sessionId = message.sessionId;
        }
        if (message.request !== undefined) {
            obj.request = extension_1.Request.toJSON(message.request);
        }
        return obj;
    },
    create(base) {
        return exports.QualifiedExtensionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQualifiedExtensionRequest();
        message.sessionId = object.sessionId ?? "";
        message.request = (object.request !== undefined && object.request !== null)
            ? extension_1.Request.fromPartial(object.request)
            : undefined;
        return message;
    },
};
function createBaseQualifiedExtensionResponse() {
    return { sessionId: "", response: undefined };
}
exports.QualifiedExtensionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sessionId !== "") {
            writer.uint32(10).string(message.sessionId);
        }
        if (message.response !== undefined) {
            extension_1.Response.encode(message.response, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQualifiedExtensionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.response = extension_1.Response.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
            response: isSet(object.response) ? extension_1.Response.fromJSON(object.response) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sessionId !== "") {
            obj.sessionId = message.sessionId;
        }
        if (message.response !== undefined) {
            obj.response = extension_1.Response.toJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.QualifiedExtensionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQualifiedExtensionResponse();
        message.sessionId = object.sessionId ?? "";
        message.response = (object.response !== undefined && object.response !== null)
            ? extension_1.Response.fromPartial(object.response)
            : undefined;
        return message;
    },
};
function createBaseQualifiedExtensionEvent() {
    return { sessionId: "", event: undefined };
}
exports.QualifiedExtensionEvent = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sessionId !== "") {
            writer.uint32(10).string(message.sessionId);
        }
        if (message.event !== undefined) {
            extension_1.Event.encode(message.event, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQualifiedExtensionEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.event = extension_1.Event.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
            event: isSet(object.event) ? extension_1.Event.fromJSON(object.event) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sessionId !== "") {
            obj.sessionId = message.sessionId;
        }
        if (message.event !== undefined) {
            obj.event = extension_1.Event.toJSON(message.event);
        }
        return obj;
    },
    create(base) {
        return exports.QualifiedExtensionEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQualifiedExtensionEvent();
        message.sessionId = object.sessionId ?? "";
        message.event = (object.event !== undefined && object.event !== null) ? extension_1.Event.fromPartial(object.event) : undefined;
        return message;
    },
};
function createBaseExtensionMessage() {
    return { request: undefined, response: undefined, event: undefined };
}
exports.ExtensionMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.request !== undefined) {
            extension_1.Request.encode(message.request, writer.uint32(10).fork()).join();
        }
        if (message.response !== undefined) {
            extension_1.Response.encode(message.response, writer.uint32(18).fork()).join();
        }
        if (message.event !== undefined) {
            extension_1.Event.encode(message.event, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtensionMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.request = extension_1.Request.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.response = extension_1.Response.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.event = extension_1.Event.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? extension_1.Request.fromJSON(object.request) : undefined,
            response: isSet(object.response) ? extension_1.Response.fromJSON(object.response) : undefined,
            event: isSet(object.event) ? extension_1.Event.fromJSON(object.event) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== undefined) {
            obj.request = extension_1.Request.toJSON(message.request);
        }
        if (message.response !== undefined) {
            obj.response = extension_1.Response.toJSON(message.response);
        }
        if (message.event !== undefined) {
            obj.event = extension_1.Event.toJSON(message.event);
        }
        return obj;
    },
    create(base) {
        return exports.ExtensionMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExtensionMessage();
        message.request = (object.request !== undefined && object.request !== null)
            ? extension_1.Request.fromPartial(object.request)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? extension_1.Response.fromPartial(object.response)
            : undefined;
        message.event = (object.event !== undefined && object.event !== null) ? extension_1.Event.fromPartial(object.event) : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
