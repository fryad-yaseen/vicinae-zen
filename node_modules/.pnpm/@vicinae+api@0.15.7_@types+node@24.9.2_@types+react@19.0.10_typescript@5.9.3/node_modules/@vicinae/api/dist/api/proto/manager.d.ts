import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AckResponse } from "./common";
export declare const protobufPackage = "proto.ext.manager";
export declare enum CommandMode {
    View = 0,
    NoView = 1,
    UNRECOGNIZED = -1
}
export declare function commandModeFromJSON(object: any): CommandMode;
export declare function commandModeToJSON(object: CommandMode): string;
export declare enum CommandEnv {
    Development = 0,
    Production = 1,
    UNRECOGNIZED = -1
}
export declare function commandEnvFromJSON(object: any): CommandEnv;
export declare function commandEnvToJSON(object: CommandEnv): string;
export interface RequestData {
    ping?: ManagerPingRequestData | undefined;
    load?: ManagerLoadCommand | undefined;
    unload?: ManagerUnloadCommand | undefined;
}
export interface ManagerPingRequestData {
}
export interface ResponseData {
    ack?: AckResponse | undefined;
    load?: ManagerLoadResponseData | undefined;
}
export interface ManagerLoadCommand {
    mode: CommandMode;
    env: CommandEnv;
    vicinaePath: string;
    /** javascript source file to execute */
    entrypoint: string;
    preferenceValues: {
        [key: string]: any | undefined;
    };
    argumentValues: {
        [key: string]: any | undefined;
    };
    isRaycast: boolean;
    commandName: string;
    extensionId: string;
}
export interface ManagerLoadCommand_PreferenceValuesEntry {
    key: string;
    value: any | undefined;
}
export interface ManagerLoadCommand_ArgumentValuesEntry {
    key: string;
    value: any | undefined;
}
export interface ManagerUnloadCommand {
    sessionId: string;
}
export interface ManagerLoadResponseData {
    sessionId: string;
}
export declare const RequestData: MessageFns<RequestData>;
export declare const ManagerPingRequestData: MessageFns<ManagerPingRequestData>;
export declare const ResponseData: MessageFns<ResponseData>;
export declare const ManagerLoadCommand: MessageFns<ManagerLoadCommand>;
export declare const ManagerLoadCommand_PreferenceValuesEntry: MessageFns<ManagerLoadCommand_PreferenceValuesEntry>;
export declare const ManagerLoadCommand_ArgumentValuesEntry: MessageFns<ManagerLoadCommand_ArgumentValuesEntry>;
export declare const ManagerUnloadCommand: MessageFns<ManagerUnloadCommand>;
export declare const ManagerLoadResponseData: MessageFns<ManagerLoadResponseData>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
