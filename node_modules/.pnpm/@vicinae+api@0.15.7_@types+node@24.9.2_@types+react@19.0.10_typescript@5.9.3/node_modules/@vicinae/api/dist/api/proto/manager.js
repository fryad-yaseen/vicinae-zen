"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: manager.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagerLoadResponseData = exports.ManagerUnloadCommand = exports.ManagerLoadCommand_ArgumentValuesEntry = exports.ManagerLoadCommand_PreferenceValuesEntry = exports.ManagerLoadCommand = exports.ResponseData = exports.ManagerPingRequestData = exports.RequestData = exports.CommandEnv = exports.CommandMode = exports.protobufPackage = void 0;
exports.commandModeFromJSON = commandModeFromJSON;
exports.commandModeToJSON = commandModeToJSON;
exports.commandEnvFromJSON = commandEnvFromJSON;
exports.commandEnvToJSON = commandEnvToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const common_1 = require("./common");
const struct_1 = require("./google/protobuf/struct");
exports.protobufPackage = "proto.ext.manager";
var CommandMode;
(function (CommandMode) {
    CommandMode[CommandMode["View"] = 0] = "View";
    CommandMode[CommandMode["NoView"] = 1] = "NoView";
    CommandMode[CommandMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CommandMode || (exports.CommandMode = CommandMode = {}));
function commandModeFromJSON(object) {
    switch (object) {
        case 0:
        case "View":
            return CommandMode.View;
        case 1:
        case "NoView":
            return CommandMode.NoView;
        case -1:
        case "UNRECOGNIZED":
        default:
            return CommandMode.UNRECOGNIZED;
    }
}
function commandModeToJSON(object) {
    switch (object) {
        case CommandMode.View:
            return "View";
        case CommandMode.NoView:
            return "NoView";
        case CommandMode.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var CommandEnv;
(function (CommandEnv) {
    CommandEnv[CommandEnv["Development"] = 0] = "Development";
    CommandEnv[CommandEnv["Production"] = 1] = "Production";
    CommandEnv[CommandEnv["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CommandEnv || (exports.CommandEnv = CommandEnv = {}));
function commandEnvFromJSON(object) {
    switch (object) {
        case 0:
        case "Development":
            return CommandEnv.Development;
        case 1:
        case "Production":
            return CommandEnv.Production;
        case -1:
        case "UNRECOGNIZED":
        default:
            return CommandEnv.UNRECOGNIZED;
    }
}
function commandEnvToJSON(object) {
    switch (object) {
        case CommandEnv.Development:
            return "Development";
        case CommandEnv.Production:
            return "Production";
        case CommandEnv.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseRequestData() {
    return { ping: undefined, load: undefined, unload: undefined };
}
exports.RequestData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ping !== undefined) {
            exports.ManagerPingRequestData.encode(message.ping, writer.uint32(10).fork()).join();
        }
        if (message.load !== undefined) {
            exports.ManagerLoadCommand.encode(message.load, writer.uint32(18).fork()).join();
        }
        if (message.unload !== undefined) {
            exports.ManagerUnloadCommand.encode(message.unload, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ping = exports.ManagerPingRequestData.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.load = exports.ManagerLoadCommand.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.unload = exports.ManagerUnloadCommand.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ping: isSet(object.ping) ? exports.ManagerPingRequestData.fromJSON(object.ping) : undefined,
            load: isSet(object.load) ? exports.ManagerLoadCommand.fromJSON(object.load) : undefined,
            unload: isSet(object.unload) ? exports.ManagerUnloadCommand.fromJSON(object.unload) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ping !== undefined) {
            obj.ping = exports.ManagerPingRequestData.toJSON(message.ping);
        }
        if (message.load !== undefined) {
            obj.load = exports.ManagerLoadCommand.toJSON(message.load);
        }
        if (message.unload !== undefined) {
            obj.unload = exports.ManagerUnloadCommand.toJSON(message.unload);
        }
        return obj;
    },
    create(base) {
        return exports.RequestData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequestData();
        message.ping = (object.ping !== undefined && object.ping !== null)
            ? exports.ManagerPingRequestData.fromPartial(object.ping)
            : undefined;
        message.load = (object.load !== undefined && object.load !== null)
            ? exports.ManagerLoadCommand.fromPartial(object.load)
            : undefined;
        message.unload = (object.unload !== undefined && object.unload !== null)
            ? exports.ManagerUnloadCommand.fromPartial(object.unload)
            : undefined;
        return message;
    },
};
function createBaseManagerPingRequestData() {
    return {};
}
exports.ManagerPingRequestData = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseManagerPingRequestData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ManagerPingRequestData.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseManagerPingRequestData();
        return message;
    },
};
function createBaseResponseData() {
    return { ack: undefined, load: undefined };
}
exports.ResponseData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ack !== undefined) {
            common_1.AckResponse.encode(message.ack, writer.uint32(10).fork()).join();
        }
        if (message.load !== undefined) {
            exports.ManagerLoadResponseData.encode(message.load, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponseData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ack = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.load = exports.ManagerLoadResponseData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ack: isSet(object.ack) ? common_1.AckResponse.fromJSON(object.ack) : undefined,
            load: isSet(object.load) ? exports.ManagerLoadResponseData.fromJSON(object.load) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ack !== undefined) {
            obj.ack = common_1.AckResponse.toJSON(message.ack);
        }
        if (message.load !== undefined) {
            obj.load = exports.ManagerLoadResponseData.toJSON(message.load);
        }
        return obj;
    },
    create(base) {
        return exports.ResponseData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponseData();
        message.ack = (object.ack !== undefined && object.ack !== null) ? common_1.AckResponse.fromPartial(object.ack) : undefined;
        message.load = (object.load !== undefined && object.load !== null)
            ? exports.ManagerLoadResponseData.fromPartial(object.load)
            : undefined;
        return message;
    },
};
function createBaseManagerLoadCommand() {
    return {
        mode: 0,
        env: 0,
        vicinaePath: "",
        entrypoint: "",
        preferenceValues: {},
        argumentValues: {},
        isRaycast: false,
        commandName: "",
        extensionId: "",
    };
}
exports.ManagerLoadCommand = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.mode !== 0) {
            writer.uint32(8).int32(message.mode);
        }
        if (message.env !== 0) {
            writer.uint32(16).int32(message.env);
        }
        if (message.vicinaePath !== "") {
            writer.uint32(26).string(message.vicinaePath);
        }
        if (message.entrypoint !== "") {
            writer.uint32(34).string(message.entrypoint);
        }
        Object.entries(message.preferenceValues).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.ManagerLoadCommand_PreferenceValuesEntry.encode({ key: key, value }, writer.uint32(42).fork()).join();
            }
        });
        Object.entries(message.argumentValues).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.ManagerLoadCommand_ArgumentValuesEntry.encode({ key: key, value }, writer.uint32(50).fork()).join();
            }
        });
        if (message.isRaycast !== false) {
            writer.uint32(56).bool(message.isRaycast);
        }
        if (message.commandName !== "") {
            writer.uint32(66).string(message.commandName);
        }
        if (message.extensionId !== "") {
            writer.uint32(74).string(message.extensionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseManagerLoadCommand();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.env = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.vicinaePath = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.entrypoint = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    const entry5 = exports.ManagerLoadCommand_PreferenceValuesEntry.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.preferenceValues[entry5.key] = entry5.value;
                    }
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    const entry6 = exports.ManagerLoadCommand_ArgumentValuesEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.argumentValues[entry6.key] = entry6.value;
                    }
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.isRaycast = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.commandName = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.extensionId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            mode: isSet(object.mode) ? commandModeFromJSON(object.mode) : 0,
            env: isSet(object.env) ? commandEnvFromJSON(object.env) : 0,
            vicinaePath: isSet(object.vicinaePath) ? globalThis.String(object.vicinaePath) : "",
            entrypoint: isSet(object.entrypoint) ? globalThis.String(object.entrypoint) : "",
            preferenceValues: isObject(object.preferenceValues)
                ? Object.entries(object.preferenceValues).reduce((acc, [key, value]) => {
                    acc[key] = value;
                    return acc;
                }, {})
                : {},
            argumentValues: isObject(object.argumentValues)
                ? Object.entries(object.argumentValues).reduce((acc, [key, value]) => {
                    acc[key] = value;
                    return acc;
                }, {})
                : {},
            isRaycast: isSet(object.isRaycast) ? globalThis.Boolean(object.isRaycast) : false,
            commandName: isSet(object.commandName) ? globalThis.String(object.commandName) : "",
            extensionId: isSet(object.extensionId) ? globalThis.String(object.extensionId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.mode !== 0) {
            obj.mode = commandModeToJSON(message.mode);
        }
        if (message.env !== 0) {
            obj.env = commandEnvToJSON(message.env);
        }
        if (message.vicinaePath !== "") {
            obj.vicinaePath = message.vicinaePath;
        }
        if (message.entrypoint !== "") {
            obj.entrypoint = message.entrypoint;
        }
        if (message.preferenceValues) {
            const entries = Object.entries(message.preferenceValues);
            if (entries.length > 0) {
                obj.preferenceValues = {};
                entries.forEach(([k, v]) => {
                    obj.preferenceValues[k] = v;
                });
            }
        }
        if (message.argumentValues) {
            const entries = Object.entries(message.argumentValues);
            if (entries.length > 0) {
                obj.argumentValues = {};
                entries.forEach(([k, v]) => {
                    obj.argumentValues[k] = v;
                });
            }
        }
        if (message.isRaycast !== false) {
            obj.isRaycast = message.isRaycast;
        }
        if (message.commandName !== "") {
            obj.commandName = message.commandName;
        }
        if (message.extensionId !== "") {
            obj.extensionId = message.extensionId;
        }
        return obj;
    },
    create(base) {
        return exports.ManagerLoadCommand.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseManagerLoadCommand();
        message.mode = object.mode ?? 0;
        message.env = object.env ?? 0;
        message.vicinaePath = object.vicinaePath ?? "";
        message.entrypoint = object.entrypoint ?? "";
        message.preferenceValues = Object.entries(object.preferenceValues ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        message.argumentValues = Object.entries(object.argumentValues ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        message.isRaycast = object.isRaycast ?? false;
        message.commandName = object.commandName ?? "";
        message.extensionId = object.extensionId ?? "";
        return message;
    },
};
function createBaseManagerLoadCommand_PreferenceValuesEntry() {
    return { key: "", value: undefined };
}
exports.ManagerLoadCommand_PreferenceValuesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseManagerLoadCommand_PreferenceValuesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.ManagerLoadCommand_PreferenceValuesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseManagerLoadCommand_PreferenceValuesEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? undefined;
        return message;
    },
};
function createBaseManagerLoadCommand_ArgumentValuesEntry() {
    return { key: "", value: undefined };
}
exports.ManagerLoadCommand_ArgumentValuesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseManagerLoadCommand_ArgumentValuesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.ManagerLoadCommand_ArgumentValuesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseManagerLoadCommand_ArgumentValuesEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? undefined;
        return message;
    },
};
function createBaseManagerUnloadCommand() {
    return { sessionId: "" };
}
exports.ManagerUnloadCommand = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sessionId !== "") {
            writer.uint32(10).string(message.sessionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseManagerUnloadCommand();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.sessionId !== "") {
            obj.sessionId = message.sessionId;
        }
        return obj;
    },
    create(base) {
        return exports.ManagerUnloadCommand.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseManagerUnloadCommand();
        message.sessionId = object.sessionId ?? "";
        return message;
    },
};
function createBaseManagerLoadResponseData() {
    return { sessionId: "" };
}
exports.ManagerLoadResponseData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sessionId !== "") {
            writer.uint32(10).string(message.sessionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseManagerLoadResponseData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.sessionId !== "") {
            obj.sessionId = message.sessionId;
        }
        return obj;
    },
    create(base) {
        return exports.ManagerLoadResponseData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseManagerLoadResponseData();
        message.sessionId = object.sessionId ?? "";
        return message;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
