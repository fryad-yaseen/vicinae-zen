"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: oauth.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Response = exports.Request = exports.AuthorizeResponse = exports.AuthorizeRequest = exports.PKCEClientOptions = exports.RedirectMethod = exports.protobufPackage = void 0;
exports.redirectMethodFromJSON = redirectMethodFromJSON;
exports.redirectMethodToJSON = redirectMethodToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const ui_1 = require("./ui");
exports.protobufPackage = "proto.ext.oauth";
var RedirectMethod;
(function (RedirectMethod) {
    RedirectMethod[RedirectMethod["Web"] = 0] = "Web";
    RedirectMethod[RedirectMethod["App"] = 1] = "App";
    RedirectMethod[RedirectMethod["AppURI"] = 2] = "AppURI";
    RedirectMethod[RedirectMethod["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RedirectMethod || (exports.RedirectMethod = RedirectMethod = {}));
function redirectMethodFromJSON(object) {
    switch (object) {
        case 0:
        case "Web":
            return RedirectMethod.Web;
        case 1:
        case "App":
            return RedirectMethod.App;
        case 2:
        case "AppURI":
            return RedirectMethod.AppURI;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RedirectMethod.UNRECOGNIZED;
    }
}
function redirectMethodToJSON(object) {
    switch (object) {
        case RedirectMethod.Web:
            return "Web";
        case RedirectMethod.App:
            return "App";
        case RedirectMethod.AppURI:
            return "AppURI";
        case RedirectMethod.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBasePKCEClientOptions() {
    return { id: undefined, name: "", description: "", icon: undefined };
}
exports.PKCEClientOptions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.icon !== undefined) {
            ui_1.Image.encode(message.icon, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePKCEClientOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.icon = ui_1.Image.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            icon: isSet(object.icon) ? ui_1.Image.fromJSON(object.icon) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.icon !== undefined) {
            obj.icon = ui_1.Image.toJSON(message.icon);
        }
        return obj;
    },
    create(base) {
        return exports.PKCEClientOptions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePKCEClientOptions();
        message.id = object.id ?? undefined;
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.icon = (object.icon !== undefined && object.icon !== null) ? ui_1.Image.fromPartial(object.icon) : undefined;
        return message;
    },
};
function createBaseAuthorizeRequest() {
    return { client: undefined, url: "" };
}
exports.AuthorizeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.client !== undefined) {
            exports.PKCEClientOptions.encode(message.client, writer.uint32(10).fork()).join();
        }
        if (message.url !== "") {
            writer.uint32(18).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuthorizeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.client = exports.PKCEClientOptions.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            client: isSet(object.client) ? exports.PKCEClientOptions.fromJSON(object.client) : undefined,
            url: isSet(object.url) ? globalThis.String(object.url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.client !== undefined) {
            obj.client = exports.PKCEClientOptions.toJSON(message.client);
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return exports.AuthorizeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAuthorizeRequest();
        message.client = (object.client !== undefined && object.client !== null)
            ? exports.PKCEClientOptions.fromPartial(object.client)
            : undefined;
        message.url = object.url ?? "";
        return message;
    },
};
function createBaseAuthorizeResponse() {
    return { code: "" };
}
exports.AuthorizeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== "") {
            writer.uint32(10).string(message.code);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuthorizeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { code: isSet(object.code) ? globalThis.String(object.code) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== "") {
            obj.code = message.code;
        }
        return obj;
    },
    create(base) {
        return exports.AuthorizeResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAuthorizeResponse();
        message.code = object.code ?? "";
        return message;
    },
};
function createBaseRequest() {
    return { authorize: undefined };
}
exports.Request = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authorize !== undefined) {
            exports.AuthorizeRequest.encode(message.authorize, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authorize = exports.AuthorizeRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { authorize: isSet(object.authorize) ? exports.AuthorizeRequest.fromJSON(object.authorize) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.authorize !== undefined) {
            obj.authorize = exports.AuthorizeRequest.toJSON(message.authorize);
        }
        return obj;
    },
    create(base) {
        return exports.Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequest();
        message.authorize = (object.authorize !== undefined && object.authorize !== null)
            ? exports.AuthorizeRequest.fromPartial(object.authorize)
            : undefined;
        return message;
    },
};
function createBaseResponse() {
    return { authorize: undefined };
}
exports.Response = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authorize !== undefined) {
            exports.AuthorizeResponse.encode(message.authorize, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authorize = exports.AuthorizeResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { authorize: isSet(object.authorize) ? exports.AuthorizeResponse.fromJSON(object.authorize) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.authorize !== undefined) {
            obj.authorize = exports.AuthorizeResponse.toJSON(message.authorize);
        }
        return obj;
    },
    create(base) {
        return exports.Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponse();
        message.authorize = (object.authorize !== undefined && object.authorize !== null)
            ? exports.AuthorizeResponse.fromPartial(object.authorize)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
