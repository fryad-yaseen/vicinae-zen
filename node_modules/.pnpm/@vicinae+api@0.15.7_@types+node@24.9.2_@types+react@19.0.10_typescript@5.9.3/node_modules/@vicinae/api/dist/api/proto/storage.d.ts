import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "proto.ext.storage";
export interface ClearRequest {
}
export interface GetRequest {
    key: string;
}
export interface GetResponse {
    value: any | undefined;
}
export interface SetResponse {
}
export interface SetRequest {
    key: string;
    value: any | undefined;
}
export interface RemoveRequest {
    key: string;
}
export interface RemoveResponse {
}
export interface ClearResponse {
}
export interface ListRequest {
}
export interface ListResponse {
    values: {
        [key: string]: any | undefined;
    };
}
export interface ListResponse_ValuesEntry {
    key: string;
    value: any | undefined;
}
export interface Request {
    get?: GetRequest | undefined;
    set?: SetRequest | undefined;
    remove?: RemoveRequest | undefined;
    clear?: ClearRequest | undefined;
    list?: ListRequest | undefined;
}
export interface Response {
    get?: GetResponse | undefined;
    set?: SetResponse | undefined;
    remove?: RemoveResponse | undefined;
    clear?: ClearResponse | undefined;
    list?: ListResponse | undefined;
}
export declare const ClearRequest: MessageFns<ClearRequest>;
export declare const GetRequest: MessageFns<GetRequest>;
export declare const GetResponse: MessageFns<GetResponse>;
export declare const SetResponse: MessageFns<SetResponse>;
export declare const SetRequest: MessageFns<SetRequest>;
export declare const RemoveRequest: MessageFns<RemoveRequest>;
export declare const RemoveResponse: MessageFns<RemoveResponse>;
export declare const ClearResponse: MessageFns<ClearResponse>;
export declare const ListRequest: MessageFns<ListRequest>;
export declare const ListResponse: MessageFns<ListResponse>;
export declare const ListResponse_ValuesEntry: MessageFns<ListResponse_ValuesEntry>;
export declare const Request: MessageFns<Request>;
export declare const Response: MessageFns<Response>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
