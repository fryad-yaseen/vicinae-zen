"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: storage.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Response = exports.Request = exports.ListResponse_ValuesEntry = exports.ListResponse = exports.ListRequest = exports.ClearResponse = exports.RemoveResponse = exports.RemoveRequest = exports.SetRequest = exports.SetResponse = exports.GetResponse = exports.GetRequest = exports.ClearRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const struct_1 = require("./google/protobuf/struct");
exports.protobufPackage = "proto.ext.storage";
function createBaseClearRequest() {
    return {};
}
exports.ClearRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClearRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ClearRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseClearRequest();
        return message;
    },
};
function createBaseGetRequest() {
    return { key: "" };
}
exports.GetRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return exports.GetRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetRequest();
        message.key = object.key ?? "";
        return message;
    },
};
function createBaseGetResponse() {
    return { value: undefined };
}
exports.GetResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object?.value) ? object.value : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.GetResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetResponse();
        message.value = object.value ?? undefined;
        return message;
    },
};
function createBaseSetResponse() {
    return {};
}
exports.SetResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.SetResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSetResponse();
        return message;
    },
};
function createBaseSetRequest() {
    return { key: "", value: undefined };
}
exports.SetRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.SetRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetRequest();
        message.key = object.key ?? "";
        message.value = object.value ?? undefined;
        return message;
    },
};
function createBaseRemoveRequest() {
    return { key: "" };
}
exports.RemoveRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveRequest();
        message.key = object.key ?? "";
        return message;
    },
};
function createBaseRemoveResponse() {
    return {};
}
exports.RemoveResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveResponse();
        return message;
    },
};
function createBaseClearResponse() {
    return {};
}
exports.ClearResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClearResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ClearResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseClearResponse();
        return message;
    },
};
function createBaseListRequest() {
    return {};
}
exports.ListRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListRequest();
        return message;
    },
};
function createBaseListResponse() {
    return { values: {} };
}
exports.ListResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.values).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.ListResponse_ValuesEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
            }
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.ListResponse_ValuesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.values[entry1.key] = entry1.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            values: isObject(object.values)
                ? Object.entries(object.values).reduce((acc, [key, value]) => {
                    acc[key] = value;
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.values) {
            const entries = Object.entries(message.values);
            if (entries.length > 0) {
                obj.values = {};
                entries.forEach(([k, v]) => {
                    obj.values[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.ListResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListResponse();
        message.values = Object.entries(object.values ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseListResponse_ValuesEntry() {
    return { key: "", value: undefined };
}
exports.ListResponse_ValuesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListResponse_ValuesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.ListResponse_ValuesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListResponse_ValuesEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? undefined;
        return message;
    },
};
function createBaseRequest() {
    return { get: undefined, set: undefined, remove: undefined, clear: undefined, list: undefined };
}
exports.Request = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.get !== undefined) {
            exports.GetRequest.encode(message.get, writer.uint32(10).fork()).join();
        }
        if (message.set !== undefined) {
            exports.SetRequest.encode(message.set, writer.uint32(18).fork()).join();
        }
        if (message.remove !== undefined) {
            exports.RemoveRequest.encode(message.remove, writer.uint32(26).fork()).join();
        }
        if (message.clear !== undefined) {
            exports.ClearRequest.encode(message.clear, writer.uint32(34).fork()).join();
        }
        if (message.list !== undefined) {
            exports.ListRequest.encode(message.list, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.get = exports.GetRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.set = exports.SetRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.remove = exports.RemoveRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clear = exports.ClearRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.list = exports.ListRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            get: isSet(object.get) ? exports.GetRequest.fromJSON(object.get) : undefined,
            set: isSet(object.set) ? exports.SetRequest.fromJSON(object.set) : undefined,
            remove: isSet(object.remove) ? exports.RemoveRequest.fromJSON(object.remove) : undefined,
            clear: isSet(object.clear) ? exports.ClearRequest.fromJSON(object.clear) : undefined,
            list: isSet(object.list) ? exports.ListRequest.fromJSON(object.list) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.get !== undefined) {
            obj.get = exports.GetRequest.toJSON(message.get);
        }
        if (message.set !== undefined) {
            obj.set = exports.SetRequest.toJSON(message.set);
        }
        if (message.remove !== undefined) {
            obj.remove = exports.RemoveRequest.toJSON(message.remove);
        }
        if (message.clear !== undefined) {
            obj.clear = exports.ClearRequest.toJSON(message.clear);
        }
        if (message.list !== undefined) {
            obj.list = exports.ListRequest.toJSON(message.list);
        }
        return obj;
    },
    create(base) {
        return exports.Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequest();
        message.get = (object.get !== undefined && object.get !== null) ? exports.GetRequest.fromPartial(object.get) : undefined;
        message.set = (object.set !== undefined && object.set !== null) ? exports.SetRequest.fromPartial(object.set) : undefined;
        message.remove = (object.remove !== undefined && object.remove !== null)
            ? exports.RemoveRequest.fromPartial(object.remove)
            : undefined;
        message.clear = (object.clear !== undefined && object.clear !== null)
            ? exports.ClearRequest.fromPartial(object.clear)
            : undefined;
        message.list = (object.list !== undefined && object.list !== null)
            ? exports.ListRequest.fromPartial(object.list)
            : undefined;
        return message;
    },
};
function createBaseResponse() {
    return { get: undefined, set: undefined, remove: undefined, clear: undefined, list: undefined };
}
exports.Response = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.get !== undefined) {
            exports.GetResponse.encode(message.get, writer.uint32(10).fork()).join();
        }
        if (message.set !== undefined) {
            exports.SetResponse.encode(message.set, writer.uint32(18).fork()).join();
        }
        if (message.remove !== undefined) {
            exports.RemoveResponse.encode(message.remove, writer.uint32(26).fork()).join();
        }
        if (message.clear !== undefined) {
            exports.ClearResponse.encode(message.clear, writer.uint32(34).fork()).join();
        }
        if (message.list !== undefined) {
            exports.ListResponse.encode(message.list, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.get = exports.GetResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.set = exports.SetResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.remove = exports.RemoveResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clear = exports.ClearResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.list = exports.ListResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            get: isSet(object.get) ? exports.GetResponse.fromJSON(object.get) : undefined,
            set: isSet(object.set) ? exports.SetResponse.fromJSON(object.set) : undefined,
            remove: isSet(object.remove) ? exports.RemoveResponse.fromJSON(object.remove) : undefined,
            clear: isSet(object.clear) ? exports.ClearResponse.fromJSON(object.clear) : undefined,
            list: isSet(object.list) ? exports.ListResponse.fromJSON(object.list) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.get !== undefined) {
            obj.get = exports.GetResponse.toJSON(message.get);
        }
        if (message.set !== undefined) {
            obj.set = exports.SetResponse.toJSON(message.set);
        }
        if (message.remove !== undefined) {
            obj.remove = exports.RemoveResponse.toJSON(message.remove);
        }
        if (message.clear !== undefined) {
            obj.clear = exports.ClearResponse.toJSON(message.clear);
        }
        if (message.list !== undefined) {
            obj.list = exports.ListResponse.toJSON(message.list);
        }
        return obj;
    },
    create(base) {
        return exports.Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponse();
        message.get = (object.get !== undefined && object.get !== null) ? exports.GetResponse.fromPartial(object.get) : undefined;
        message.set = (object.set !== undefined && object.set !== null) ? exports.SetResponse.fromPartial(object.set) : undefined;
        message.remove = (object.remove !== undefined && object.remove !== null)
            ? exports.RemoveResponse.fromPartial(object.remove)
            : undefined;
        message.clear = (object.clear !== undefined && object.clear !== null)
            ? exports.ClearResponse.fromPartial(object.clear)
            : undefined;
        message.list = (object.list !== undefined && object.list !== null)
            ? exports.ListResponse.fromPartial(object.list)
            : undefined;
        return message;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
