import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AckResponse } from "./common";
export declare const protobufPackage = "proto.ext.ui";
export declare enum ToastStyle {
    Success = 0,
    Info = 1,
    Warning = 2,
    Error = 3,
    Dynamic = 4,
    UNRECOGNIZED = -1
}
export declare function toastStyleFromJSON(object: any): ToastStyle;
export declare function toastStyleToJSON(object: ToastStyle): string;
export declare enum PopToRootType {
    PopToRootDefault = 0,
    PopToRootImmediate = 1,
    PopToRootSuspended = 2,
    UNRECOGNIZED = -1
}
export declare function popToRootTypeFromJSON(object: any): PopToRootType;
export declare function popToRootTypeToJSON(object: PopToRootType): string;
export declare enum ConfirmAlertActionStyle {
    Default = 0,
    Destructive = 1,
    Cancel = 2,
    UNRECOGNIZED = -1
}
export declare function confirmAlertActionStyleFromJSON(object: any): ConfirmAlertActionStyle;
export declare function confirmAlertActionStyleToJSON(object: ConfirmAlertActionStyle): string;
export declare enum ImageMask {
    None = 0,
    Circle = 1,
    RoundedRectangle = 2,
    UNRECOGNIZED = -1
}
export declare function imageMaskFromJSON(object: any): ImageMask;
export declare function imageMaskToJSON(object: ImageMask): string;
export interface ShowToastRequest {
    id: string;
    title: string;
    style: ToastStyle;
}
export interface HideToastRequest {
    id: string;
}
export interface UpdateToastRequest {
    id: string;
    title: string;
}
export interface PushViewRequest {
}
export interface PopViewRequest {
}
export interface CloseMainWindowRequest {
    clearRootSearch: boolean;
    popToRoot: PopToRootType;
}
export interface ClearSearchBarRequest {
}
export interface SetSearchTextRequest {
    text: string;
}
export interface GetSelectedTextRequest {
}
export interface GetSelectedTextResponse {
    text: string;
}
export interface ShowHudRequest {
    text: string;
    clearRootSearch: boolean;
    popToRoot: PopToRootType;
}
export interface RenderRequest {
    /**
     * repeated RenderNode views = 1;
     * we will migrate to actual protobuf
     */
    json: string;
}
export interface ConfirmAlertRequest {
    title: string;
    description: string;
    icon: Image | undefined;
    dismissAction: ConfirmAlertAction | undefined;
    primaryAction: ConfirmAlertAction | undefined;
    rememberUserChoice: boolean;
}
export interface ConfirmAlertResponse {
    confirmed: boolean;
}
export interface ConfirmAlertAction {
    title: string;
    style: ConfirmAlertActionStyle;
}
export interface PopToRootRequest {
    clearSearchBar: boolean;
}
export interface Request {
    render?: RenderRequest | undefined;
    showToast?: ShowToastRequest | undefined;
    hideToast?: HideToastRequest | undefined;
    updateToast?: UpdateToastRequest | undefined;
    pushView?: PushViewRequest | undefined;
    popView?: PopViewRequest | undefined;
    clearSearch?: ClearSearchBarRequest | undefined;
    closeMainWindow?: CloseMainWindowRequest | undefined;
    showHud?: ShowHudRequest | undefined;
    setSearchText?: SetSearchTextRequest | undefined;
    confirmAlert?: ConfirmAlertRequest | undefined;
    getSelectedText?: GetSelectedTextRequest | undefined;
    popToRoot?: PopToRootRequest | undefined;
}
export interface Response {
    render?: AckResponse | undefined;
    showToast?: AckResponse | undefined;
    hideToast?: AckResponse | undefined;
    updateToast?: AckResponse | undefined;
    pushView?: AckResponse | undefined;
    popView?: AckResponse | undefined;
    clearSearch?: AckResponse | undefined;
    closeMainWindow?: AckResponse | undefined;
    showHud?: AckResponse | undefined;
    setSearchText?: AckResponse | undefined;
    confirmAlert?: ConfirmAlertResponse | undefined;
    getSelectedText?: GetSelectedTextResponse | undefined;
    popToRoot?: AckResponse | undefined;
}
export interface RenderNode {
    type: string;
    hasDirtyChild: boolean;
    hasDirtyProps: boolean;
    props: {
        [key: string]: any | undefined;
    };
    children: RenderNode[];
}
export interface RenderNode_PropsEntry {
    key: string;
    value: any | undefined;
}
export interface ThemedImageSource {
    light: string;
    dark: string;
}
export interface ImageSource {
    raw?: string | undefined;
    themed?: ThemedImageSource | undefined;
}
export interface Image {
    source: ImageSource | undefined;
    fallback?: ImageSource | undefined;
    mask?: ImageMask | undefined;
    colorTint?: string | undefined;
}
export declare const ShowToastRequest: MessageFns<ShowToastRequest>;
export declare const HideToastRequest: MessageFns<HideToastRequest>;
export declare const UpdateToastRequest: MessageFns<UpdateToastRequest>;
export declare const PushViewRequest: MessageFns<PushViewRequest>;
export declare const PopViewRequest: MessageFns<PopViewRequest>;
export declare const CloseMainWindowRequest: MessageFns<CloseMainWindowRequest>;
export declare const ClearSearchBarRequest: MessageFns<ClearSearchBarRequest>;
export declare const SetSearchTextRequest: MessageFns<SetSearchTextRequest>;
export declare const GetSelectedTextRequest: MessageFns<GetSelectedTextRequest>;
export declare const GetSelectedTextResponse: MessageFns<GetSelectedTextResponse>;
export declare const ShowHudRequest: MessageFns<ShowHudRequest>;
export declare const RenderRequest: MessageFns<RenderRequest>;
export declare const ConfirmAlertRequest: MessageFns<ConfirmAlertRequest>;
export declare const ConfirmAlertResponse: MessageFns<ConfirmAlertResponse>;
export declare const ConfirmAlertAction: MessageFns<ConfirmAlertAction>;
export declare const PopToRootRequest: MessageFns<PopToRootRequest>;
export declare const Request: MessageFns<Request>;
export declare const Response: MessageFns<Response>;
export declare const RenderNode: MessageFns<RenderNode>;
export declare const RenderNode_PropsEntry: MessageFns<RenderNode_PropsEntry>;
export declare const ThemedImageSource: MessageFns<ThemedImageSource>;
export declare const ImageSource: MessageFns<ImageSource>;
export declare const Image: MessageFns<Image>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
