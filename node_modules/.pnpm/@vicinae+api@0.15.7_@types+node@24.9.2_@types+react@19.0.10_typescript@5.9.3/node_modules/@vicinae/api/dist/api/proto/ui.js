"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: ui.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = exports.ImageSource = exports.ThemedImageSource = exports.RenderNode_PropsEntry = exports.RenderNode = exports.Response = exports.Request = exports.PopToRootRequest = exports.ConfirmAlertAction = exports.ConfirmAlertResponse = exports.ConfirmAlertRequest = exports.RenderRequest = exports.ShowHudRequest = exports.GetSelectedTextResponse = exports.GetSelectedTextRequest = exports.SetSearchTextRequest = exports.ClearSearchBarRequest = exports.CloseMainWindowRequest = exports.PopViewRequest = exports.PushViewRequest = exports.UpdateToastRequest = exports.HideToastRequest = exports.ShowToastRequest = exports.ImageMask = exports.ConfirmAlertActionStyle = exports.PopToRootType = exports.ToastStyle = exports.protobufPackage = void 0;
exports.toastStyleFromJSON = toastStyleFromJSON;
exports.toastStyleToJSON = toastStyleToJSON;
exports.popToRootTypeFromJSON = popToRootTypeFromJSON;
exports.popToRootTypeToJSON = popToRootTypeToJSON;
exports.confirmAlertActionStyleFromJSON = confirmAlertActionStyleFromJSON;
exports.confirmAlertActionStyleToJSON = confirmAlertActionStyleToJSON;
exports.imageMaskFromJSON = imageMaskFromJSON;
exports.imageMaskToJSON = imageMaskToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const common_1 = require("./common");
const struct_1 = require("./google/protobuf/struct");
exports.protobufPackage = "proto.ext.ui";
var ToastStyle;
(function (ToastStyle) {
    ToastStyle[ToastStyle["Success"] = 0] = "Success";
    ToastStyle[ToastStyle["Info"] = 1] = "Info";
    ToastStyle[ToastStyle["Warning"] = 2] = "Warning";
    ToastStyle[ToastStyle["Error"] = 3] = "Error";
    ToastStyle[ToastStyle["Dynamic"] = 4] = "Dynamic";
    ToastStyle[ToastStyle["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ToastStyle || (exports.ToastStyle = ToastStyle = {}));
function toastStyleFromJSON(object) {
    switch (object) {
        case 0:
        case "Success":
            return ToastStyle.Success;
        case 1:
        case "Info":
            return ToastStyle.Info;
        case 2:
        case "Warning":
            return ToastStyle.Warning;
        case 3:
        case "Error":
            return ToastStyle.Error;
        case 4:
        case "Dynamic":
            return ToastStyle.Dynamic;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ToastStyle.UNRECOGNIZED;
    }
}
function toastStyleToJSON(object) {
    switch (object) {
        case ToastStyle.Success:
            return "Success";
        case ToastStyle.Info:
            return "Info";
        case ToastStyle.Warning:
            return "Warning";
        case ToastStyle.Error:
            return "Error";
        case ToastStyle.Dynamic:
            return "Dynamic";
        case ToastStyle.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var PopToRootType;
(function (PopToRootType) {
    PopToRootType[PopToRootType["PopToRootDefault"] = 0] = "PopToRootDefault";
    PopToRootType[PopToRootType["PopToRootImmediate"] = 1] = "PopToRootImmediate";
    PopToRootType[PopToRootType["PopToRootSuspended"] = 2] = "PopToRootSuspended";
    PopToRootType[PopToRootType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PopToRootType || (exports.PopToRootType = PopToRootType = {}));
function popToRootTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "PopToRootDefault":
            return PopToRootType.PopToRootDefault;
        case 1:
        case "PopToRootImmediate":
            return PopToRootType.PopToRootImmediate;
        case 2:
        case "PopToRootSuspended":
            return PopToRootType.PopToRootSuspended;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PopToRootType.UNRECOGNIZED;
    }
}
function popToRootTypeToJSON(object) {
    switch (object) {
        case PopToRootType.PopToRootDefault:
            return "PopToRootDefault";
        case PopToRootType.PopToRootImmediate:
            return "PopToRootImmediate";
        case PopToRootType.PopToRootSuspended:
            return "PopToRootSuspended";
        case PopToRootType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var ConfirmAlertActionStyle;
(function (ConfirmAlertActionStyle) {
    ConfirmAlertActionStyle[ConfirmAlertActionStyle["Default"] = 0] = "Default";
    ConfirmAlertActionStyle[ConfirmAlertActionStyle["Destructive"] = 1] = "Destructive";
    ConfirmAlertActionStyle[ConfirmAlertActionStyle["Cancel"] = 2] = "Cancel";
    ConfirmAlertActionStyle[ConfirmAlertActionStyle["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfirmAlertActionStyle || (exports.ConfirmAlertActionStyle = ConfirmAlertActionStyle = {}));
function confirmAlertActionStyleFromJSON(object) {
    switch (object) {
        case 0:
        case "Default":
            return ConfirmAlertActionStyle.Default;
        case 1:
        case "Destructive":
            return ConfirmAlertActionStyle.Destructive;
        case 2:
        case "Cancel":
            return ConfirmAlertActionStyle.Cancel;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ConfirmAlertActionStyle.UNRECOGNIZED;
    }
}
function confirmAlertActionStyleToJSON(object) {
    switch (object) {
        case ConfirmAlertActionStyle.Default:
            return "Default";
        case ConfirmAlertActionStyle.Destructive:
            return "Destructive";
        case ConfirmAlertActionStyle.Cancel:
            return "Cancel";
        case ConfirmAlertActionStyle.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var ImageMask;
(function (ImageMask) {
    ImageMask[ImageMask["None"] = 0] = "None";
    ImageMask[ImageMask["Circle"] = 1] = "Circle";
    ImageMask[ImageMask["RoundedRectangle"] = 2] = "RoundedRectangle";
    ImageMask[ImageMask["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ImageMask || (exports.ImageMask = ImageMask = {}));
function imageMaskFromJSON(object) {
    switch (object) {
        case 0:
        case "None":
            return ImageMask.None;
        case 1:
        case "Circle":
            return ImageMask.Circle;
        case 2:
        case "RoundedRectangle":
            return ImageMask.RoundedRectangle;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ImageMask.UNRECOGNIZED;
    }
}
function imageMaskToJSON(object) {
    switch (object) {
        case ImageMask.None:
            return "None";
        case ImageMask.Circle:
            return "Circle";
        case ImageMask.RoundedRectangle:
            return "RoundedRectangle";
        case ImageMask.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseShowToastRequest() {
    return { id: "", title: "", style: 0 };
}
exports.ShowToastRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.style !== 0) {
            writer.uint32(24).int32(message.style);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseShowToastRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.style = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            style: isSet(object.style) ? toastStyleFromJSON(object.style) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.style !== 0) {
            obj.style = toastStyleToJSON(message.style);
        }
        return obj;
    },
    create(base) {
        return exports.ShowToastRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseShowToastRequest();
        message.id = object.id ?? "";
        message.title = object.title ?? "";
        message.style = object.style ?? 0;
        return message;
    },
};
function createBaseHideToastRequest() {
    return { id: "" };
}
exports.HideToastRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHideToastRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.HideToastRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHideToastRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateToastRequest() {
    return { id: "", title: "" };
}
exports.UpdateToastRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateToastRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateToastRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateToastRequest();
        message.id = object.id ?? "";
        message.title = object.title ?? "";
        return message;
    },
};
function createBasePushViewRequest() {
    return {};
}
exports.PushViewRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePushViewRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.PushViewRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBasePushViewRequest();
        return message;
    },
};
function createBasePopViewRequest() {
    return {};
}
exports.PopViewRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePopViewRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.PopViewRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBasePopViewRequest();
        return message;
    },
};
function createBaseCloseMainWindowRequest() {
    return { clearRootSearch: false, popToRoot: 0 };
}
exports.CloseMainWindowRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clearRootSearch !== false) {
            writer.uint32(8).bool(message.clearRootSearch);
        }
        if (message.popToRoot !== 0) {
            writer.uint32(16).int32(message.popToRoot);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCloseMainWindowRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.clearRootSearch = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.popToRoot = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clearRootSearch: isSet(object.clearRootSearch) ? globalThis.Boolean(object.clearRootSearch) : false,
            popToRoot: isSet(object.popToRoot) ? popToRootTypeFromJSON(object.popToRoot) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clearRootSearch !== false) {
            obj.clearRootSearch = message.clearRootSearch;
        }
        if (message.popToRoot !== 0) {
            obj.popToRoot = popToRootTypeToJSON(message.popToRoot);
        }
        return obj;
    },
    create(base) {
        return exports.CloseMainWindowRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCloseMainWindowRequest();
        message.clearRootSearch = object.clearRootSearch ?? false;
        message.popToRoot = object.popToRoot ?? 0;
        return message;
    },
};
function createBaseClearSearchBarRequest() {
    return {};
}
exports.ClearSearchBarRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClearSearchBarRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ClearSearchBarRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseClearSearchBarRequest();
        return message;
    },
};
function createBaseSetSearchTextRequest() {
    return { text: "" };
}
exports.SetSearchTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetSearchTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return exports.SetSearchTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetSearchTextRequest();
        message.text = object.text ?? "";
        return message;
    },
};
function createBaseGetSelectedTextRequest() {
    return {};
}
exports.GetSelectedTextRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSelectedTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetSelectedTextRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetSelectedTextRequest();
        return message;
    },
};
function createBaseGetSelectedTextResponse() {
    return { text: "" };
}
exports.GetSelectedTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSelectedTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return exports.GetSelectedTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSelectedTextResponse();
        message.text = object.text ?? "";
        return message;
    },
};
function createBaseShowHudRequest() {
    return { text: "", clearRootSearch: false, popToRoot: 0 };
}
exports.ShowHudRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        if (message.clearRootSearch !== false) {
            writer.uint32(16).bool(message.clearRootSearch);
        }
        if (message.popToRoot !== 0) {
            writer.uint32(24).int32(message.popToRoot);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseShowHudRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.clearRootSearch = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.popToRoot = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            clearRootSearch: isSet(object.clearRootSearch) ? globalThis.Boolean(object.clearRootSearch) : false,
            popToRoot: isSet(object.popToRoot) ? popToRootTypeFromJSON(object.popToRoot) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.clearRootSearch !== false) {
            obj.clearRootSearch = message.clearRootSearch;
        }
        if (message.popToRoot !== 0) {
            obj.popToRoot = popToRootTypeToJSON(message.popToRoot);
        }
        return obj;
    },
    create(base) {
        return exports.ShowHudRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseShowHudRequest();
        message.text = object.text ?? "";
        message.clearRootSearch = object.clearRootSearch ?? false;
        message.popToRoot = object.popToRoot ?? 0;
        return message;
    },
};
function createBaseRenderRequest() {
    return { json: "" };
}
exports.RenderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.json !== "") {
            writer.uint32(10).string(message.json);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRenderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.json = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { json: isSet(object.json) ? globalThis.String(object.json) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.json !== "") {
            obj.json = message.json;
        }
        return obj;
    },
    create(base) {
        return exports.RenderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRenderRequest();
        message.json = object.json ?? "";
        return message;
    },
};
function createBaseConfirmAlertRequest() {
    return {
        title: "",
        description: "",
        icon: undefined,
        dismissAction: undefined,
        primaryAction: undefined,
        rememberUserChoice: false,
    };
}
exports.ConfirmAlertRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.icon !== undefined) {
            exports.Image.encode(message.icon, writer.uint32(26).fork()).join();
        }
        if (message.dismissAction !== undefined) {
            exports.ConfirmAlertAction.encode(message.dismissAction, writer.uint32(34).fork()).join();
        }
        if (message.primaryAction !== undefined) {
            exports.ConfirmAlertAction.encode(message.primaryAction, writer.uint32(42).fork()).join();
        }
        if (message.rememberUserChoice !== false) {
            writer.uint32(48).bool(message.rememberUserChoice);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfirmAlertRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.icon = exports.Image.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.dismissAction = exports.ConfirmAlertAction.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.primaryAction = exports.ConfirmAlertAction.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.rememberUserChoice = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            icon: isSet(object.icon) ? exports.Image.fromJSON(object.icon) : undefined,
            dismissAction: isSet(object.dismissAction) ? exports.ConfirmAlertAction.fromJSON(object.dismissAction) : undefined,
            primaryAction: isSet(object.primaryAction) ? exports.ConfirmAlertAction.fromJSON(object.primaryAction) : undefined,
            rememberUserChoice: isSet(object.rememberUserChoice) ? globalThis.Boolean(object.rememberUserChoice) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.icon !== undefined) {
            obj.icon = exports.Image.toJSON(message.icon);
        }
        if (message.dismissAction !== undefined) {
            obj.dismissAction = exports.ConfirmAlertAction.toJSON(message.dismissAction);
        }
        if (message.primaryAction !== undefined) {
            obj.primaryAction = exports.ConfirmAlertAction.toJSON(message.primaryAction);
        }
        if (message.rememberUserChoice !== false) {
            obj.rememberUserChoice = message.rememberUserChoice;
        }
        return obj;
    },
    create(base) {
        return exports.ConfirmAlertRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConfirmAlertRequest();
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.icon = (object.icon !== undefined && object.icon !== null) ? exports.Image.fromPartial(object.icon) : undefined;
        message.dismissAction = (object.dismissAction !== undefined && object.dismissAction !== null)
            ? exports.ConfirmAlertAction.fromPartial(object.dismissAction)
            : undefined;
        message.primaryAction = (object.primaryAction !== undefined && object.primaryAction !== null)
            ? exports.ConfirmAlertAction.fromPartial(object.primaryAction)
            : undefined;
        message.rememberUserChoice = object.rememberUserChoice ?? false;
        return message;
    },
};
function createBaseConfirmAlertResponse() {
    return { confirmed: false };
}
exports.ConfirmAlertResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.confirmed !== false) {
            writer.uint32(8).bool(message.confirmed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfirmAlertResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.confirmed = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { confirmed: isSet(object.confirmed) ? globalThis.Boolean(object.confirmed) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.confirmed !== false) {
            obj.confirmed = message.confirmed;
        }
        return obj;
    },
    create(base) {
        return exports.ConfirmAlertResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConfirmAlertResponse();
        message.confirmed = object.confirmed ?? false;
        return message;
    },
};
function createBaseConfirmAlertAction() {
    return { title: "", style: 0 };
}
exports.ConfirmAlertAction = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.style !== 0) {
            writer.uint32(16).int32(message.style);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfirmAlertAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.style = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            style: isSet(object.style) ? confirmAlertActionStyleFromJSON(object.style) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.style !== 0) {
            obj.style = confirmAlertActionStyleToJSON(message.style);
        }
        return obj;
    },
    create(base) {
        return exports.ConfirmAlertAction.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConfirmAlertAction();
        message.title = object.title ?? "";
        message.style = object.style ?? 0;
        return message;
    },
};
function createBasePopToRootRequest() {
    return { clearSearchBar: false };
}
exports.PopToRootRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clearSearchBar !== false) {
            writer.uint32(8).bool(message.clearSearchBar);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePopToRootRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.clearSearchBar = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clearSearchBar: isSet(object.clearSearchBar) ? globalThis.Boolean(object.clearSearchBar) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.clearSearchBar !== false) {
            obj.clearSearchBar = message.clearSearchBar;
        }
        return obj;
    },
    create(base) {
        return exports.PopToRootRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePopToRootRequest();
        message.clearSearchBar = object.clearSearchBar ?? false;
        return message;
    },
};
function createBaseRequest() {
    return {
        render: undefined,
        showToast: undefined,
        hideToast: undefined,
        updateToast: undefined,
        pushView: undefined,
        popView: undefined,
        clearSearch: undefined,
        closeMainWindow: undefined,
        showHud: undefined,
        setSearchText: undefined,
        confirmAlert: undefined,
        getSelectedText: undefined,
        popToRoot: undefined,
    };
}
exports.Request = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.render !== undefined) {
            exports.RenderRequest.encode(message.render, writer.uint32(10).fork()).join();
        }
        if (message.showToast !== undefined) {
            exports.ShowToastRequest.encode(message.showToast, writer.uint32(18).fork()).join();
        }
        if (message.hideToast !== undefined) {
            exports.HideToastRequest.encode(message.hideToast, writer.uint32(26).fork()).join();
        }
        if (message.updateToast !== undefined) {
            exports.UpdateToastRequest.encode(message.updateToast, writer.uint32(34).fork()).join();
        }
        if (message.pushView !== undefined) {
            exports.PushViewRequest.encode(message.pushView, writer.uint32(42).fork()).join();
        }
        if (message.popView !== undefined) {
            exports.PopViewRequest.encode(message.popView, writer.uint32(50).fork()).join();
        }
        if (message.clearSearch !== undefined) {
            exports.ClearSearchBarRequest.encode(message.clearSearch, writer.uint32(58).fork()).join();
        }
        if (message.closeMainWindow !== undefined) {
            exports.CloseMainWindowRequest.encode(message.closeMainWindow, writer.uint32(66).fork()).join();
        }
        if (message.showHud !== undefined) {
            exports.ShowHudRequest.encode(message.showHud, writer.uint32(74).fork()).join();
        }
        if (message.setSearchText !== undefined) {
            exports.SetSearchTextRequest.encode(message.setSearchText, writer.uint32(82).fork()).join();
        }
        if (message.confirmAlert !== undefined) {
            exports.ConfirmAlertRequest.encode(message.confirmAlert, writer.uint32(90).fork()).join();
        }
        if (message.getSelectedText !== undefined) {
            exports.GetSelectedTextRequest.encode(message.getSelectedText, writer.uint32(98).fork()).join();
        }
        if (message.popToRoot !== undefined) {
            exports.PopToRootRequest.encode(message.popToRoot, writer.uint32(106).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.render = exports.RenderRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.showToast = exports.ShowToastRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.hideToast = exports.HideToastRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updateToast = exports.UpdateToastRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.pushView = exports.PushViewRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.popView = exports.PopViewRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.clearSearch = exports.ClearSearchBarRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.closeMainWindow = exports.CloseMainWindowRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.showHud = exports.ShowHudRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.setSearchText = exports.SetSearchTextRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.confirmAlert = exports.ConfirmAlertRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.getSelectedText = exports.GetSelectedTextRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.popToRoot = exports.PopToRootRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            render: isSet(object.render) ? exports.RenderRequest.fromJSON(object.render) : undefined,
            showToast: isSet(object.showToast) ? exports.ShowToastRequest.fromJSON(object.showToast) : undefined,
            hideToast: isSet(object.hideToast) ? exports.HideToastRequest.fromJSON(object.hideToast) : undefined,
            updateToast: isSet(object.updateToast) ? exports.UpdateToastRequest.fromJSON(object.updateToast) : undefined,
            pushView: isSet(object.pushView) ? exports.PushViewRequest.fromJSON(object.pushView) : undefined,
            popView: isSet(object.popView) ? exports.PopViewRequest.fromJSON(object.popView) : undefined,
            clearSearch: isSet(object.clearSearch) ? exports.ClearSearchBarRequest.fromJSON(object.clearSearch) : undefined,
            closeMainWindow: isSet(object.closeMainWindow)
                ? exports.CloseMainWindowRequest.fromJSON(object.closeMainWindow)
                : undefined,
            showHud: isSet(object.showHud) ? exports.ShowHudRequest.fromJSON(object.showHud) : undefined,
            setSearchText: isSet(object.setSearchText) ? exports.SetSearchTextRequest.fromJSON(object.setSearchText) : undefined,
            confirmAlert: isSet(object.confirmAlert) ? exports.ConfirmAlertRequest.fromJSON(object.confirmAlert) : undefined,
            getSelectedText: isSet(object.getSelectedText)
                ? exports.GetSelectedTextRequest.fromJSON(object.getSelectedText)
                : undefined,
            popToRoot: isSet(object.popToRoot) ? exports.PopToRootRequest.fromJSON(object.popToRoot) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.render !== undefined) {
            obj.render = exports.RenderRequest.toJSON(message.render);
        }
        if (message.showToast !== undefined) {
            obj.showToast = exports.ShowToastRequest.toJSON(message.showToast);
        }
        if (message.hideToast !== undefined) {
            obj.hideToast = exports.HideToastRequest.toJSON(message.hideToast);
        }
        if (message.updateToast !== undefined) {
            obj.updateToast = exports.UpdateToastRequest.toJSON(message.updateToast);
        }
        if (message.pushView !== undefined) {
            obj.pushView = exports.PushViewRequest.toJSON(message.pushView);
        }
        if (message.popView !== undefined) {
            obj.popView = exports.PopViewRequest.toJSON(message.popView);
        }
        if (message.clearSearch !== undefined) {
            obj.clearSearch = exports.ClearSearchBarRequest.toJSON(message.clearSearch);
        }
        if (message.closeMainWindow !== undefined) {
            obj.closeMainWindow = exports.CloseMainWindowRequest.toJSON(message.closeMainWindow);
        }
        if (message.showHud !== undefined) {
            obj.showHud = exports.ShowHudRequest.toJSON(message.showHud);
        }
        if (message.setSearchText !== undefined) {
            obj.setSearchText = exports.SetSearchTextRequest.toJSON(message.setSearchText);
        }
        if (message.confirmAlert !== undefined) {
            obj.confirmAlert = exports.ConfirmAlertRequest.toJSON(message.confirmAlert);
        }
        if (message.getSelectedText !== undefined) {
            obj.getSelectedText = exports.GetSelectedTextRequest.toJSON(message.getSelectedText);
        }
        if (message.popToRoot !== undefined) {
            obj.popToRoot = exports.PopToRootRequest.toJSON(message.popToRoot);
        }
        return obj;
    },
    create(base) {
        return exports.Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequest();
        message.render = (object.render !== undefined && object.render !== null)
            ? exports.RenderRequest.fromPartial(object.render)
            : undefined;
        message.showToast = (object.showToast !== undefined && object.showToast !== null)
            ? exports.ShowToastRequest.fromPartial(object.showToast)
            : undefined;
        message.hideToast = (object.hideToast !== undefined && object.hideToast !== null)
            ? exports.HideToastRequest.fromPartial(object.hideToast)
            : undefined;
        message.updateToast = (object.updateToast !== undefined && object.updateToast !== null)
            ? exports.UpdateToastRequest.fromPartial(object.updateToast)
            : undefined;
        message.pushView = (object.pushView !== undefined && object.pushView !== null)
            ? exports.PushViewRequest.fromPartial(object.pushView)
            : undefined;
        message.popView = (object.popView !== undefined && object.popView !== null)
            ? exports.PopViewRequest.fromPartial(object.popView)
            : undefined;
        message.clearSearch = (object.clearSearch !== undefined && object.clearSearch !== null)
            ? exports.ClearSearchBarRequest.fromPartial(object.clearSearch)
            : undefined;
        message.closeMainWindow = (object.closeMainWindow !== undefined && object.closeMainWindow !== null)
            ? exports.CloseMainWindowRequest.fromPartial(object.closeMainWindow)
            : undefined;
        message.showHud = (object.showHud !== undefined && object.showHud !== null)
            ? exports.ShowHudRequest.fromPartial(object.showHud)
            : undefined;
        message.setSearchText = (object.setSearchText !== undefined && object.setSearchText !== null)
            ? exports.SetSearchTextRequest.fromPartial(object.setSearchText)
            : undefined;
        message.confirmAlert = (object.confirmAlert !== undefined && object.confirmAlert !== null)
            ? exports.ConfirmAlertRequest.fromPartial(object.confirmAlert)
            : undefined;
        message.getSelectedText = (object.getSelectedText !== undefined && object.getSelectedText !== null)
            ? exports.GetSelectedTextRequest.fromPartial(object.getSelectedText)
            : undefined;
        message.popToRoot = (object.popToRoot !== undefined && object.popToRoot !== null)
            ? exports.PopToRootRequest.fromPartial(object.popToRoot)
            : undefined;
        return message;
    },
};
function createBaseResponse() {
    return {
        render: undefined,
        showToast: undefined,
        hideToast: undefined,
        updateToast: undefined,
        pushView: undefined,
        popView: undefined,
        clearSearch: undefined,
        closeMainWindow: undefined,
        showHud: undefined,
        setSearchText: undefined,
        confirmAlert: undefined,
        getSelectedText: undefined,
        popToRoot: undefined,
    };
}
exports.Response = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.render !== undefined) {
            common_1.AckResponse.encode(message.render, writer.uint32(10).fork()).join();
        }
        if (message.showToast !== undefined) {
            common_1.AckResponse.encode(message.showToast, writer.uint32(18).fork()).join();
        }
        if (message.hideToast !== undefined) {
            common_1.AckResponse.encode(message.hideToast, writer.uint32(26).fork()).join();
        }
        if (message.updateToast !== undefined) {
            common_1.AckResponse.encode(message.updateToast, writer.uint32(34).fork()).join();
        }
        if (message.pushView !== undefined) {
            common_1.AckResponse.encode(message.pushView, writer.uint32(42).fork()).join();
        }
        if (message.popView !== undefined) {
            common_1.AckResponse.encode(message.popView, writer.uint32(50).fork()).join();
        }
        if (message.clearSearch !== undefined) {
            common_1.AckResponse.encode(message.clearSearch, writer.uint32(58).fork()).join();
        }
        if (message.closeMainWindow !== undefined) {
            common_1.AckResponse.encode(message.closeMainWindow, writer.uint32(66).fork()).join();
        }
        if (message.showHud !== undefined) {
            common_1.AckResponse.encode(message.showHud, writer.uint32(74).fork()).join();
        }
        if (message.setSearchText !== undefined) {
            common_1.AckResponse.encode(message.setSearchText, writer.uint32(82).fork()).join();
        }
        if (message.confirmAlert !== undefined) {
            exports.ConfirmAlertResponse.encode(message.confirmAlert, writer.uint32(90).fork()).join();
        }
        if (message.getSelectedText !== undefined) {
            exports.GetSelectedTextResponse.encode(message.getSelectedText, writer.uint32(98).fork()).join();
        }
        if (message.popToRoot !== undefined) {
            common_1.AckResponse.encode(message.popToRoot, writer.uint32(106).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.render = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.showToast = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.hideToast = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updateToast = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.pushView = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.popView = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.clearSearch = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.closeMainWindow = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.showHud = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.setSearchText = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.confirmAlert = exports.ConfirmAlertResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.getSelectedText = exports.GetSelectedTextResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.popToRoot = common_1.AckResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            render: isSet(object.render) ? common_1.AckResponse.fromJSON(object.render) : undefined,
            showToast: isSet(object.showToast) ? common_1.AckResponse.fromJSON(object.showToast) : undefined,
            hideToast: isSet(object.hideToast) ? common_1.AckResponse.fromJSON(object.hideToast) : undefined,
            updateToast: isSet(object.updateToast) ? common_1.AckResponse.fromJSON(object.updateToast) : undefined,
            pushView: isSet(object.pushView) ? common_1.AckResponse.fromJSON(object.pushView) : undefined,
            popView: isSet(object.popView) ? common_1.AckResponse.fromJSON(object.popView) : undefined,
            clearSearch: isSet(object.clearSearch) ? common_1.AckResponse.fromJSON(object.clearSearch) : undefined,
            closeMainWindow: isSet(object.closeMainWindow) ? common_1.AckResponse.fromJSON(object.closeMainWindow) : undefined,
            showHud: isSet(object.showHud) ? common_1.AckResponse.fromJSON(object.showHud) : undefined,
            setSearchText: isSet(object.setSearchText) ? common_1.AckResponse.fromJSON(object.setSearchText) : undefined,
            confirmAlert: isSet(object.confirmAlert) ? exports.ConfirmAlertResponse.fromJSON(object.confirmAlert) : undefined,
            getSelectedText: isSet(object.getSelectedText)
                ? exports.GetSelectedTextResponse.fromJSON(object.getSelectedText)
                : undefined,
            popToRoot: isSet(object.popToRoot) ? common_1.AckResponse.fromJSON(object.popToRoot) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.render !== undefined) {
            obj.render = common_1.AckResponse.toJSON(message.render);
        }
        if (message.showToast !== undefined) {
            obj.showToast = common_1.AckResponse.toJSON(message.showToast);
        }
        if (message.hideToast !== undefined) {
            obj.hideToast = common_1.AckResponse.toJSON(message.hideToast);
        }
        if (message.updateToast !== undefined) {
            obj.updateToast = common_1.AckResponse.toJSON(message.updateToast);
        }
        if (message.pushView !== undefined) {
            obj.pushView = common_1.AckResponse.toJSON(message.pushView);
        }
        if (message.popView !== undefined) {
            obj.popView = common_1.AckResponse.toJSON(message.popView);
        }
        if (message.clearSearch !== undefined) {
            obj.clearSearch = common_1.AckResponse.toJSON(message.clearSearch);
        }
        if (message.closeMainWindow !== undefined) {
            obj.closeMainWindow = common_1.AckResponse.toJSON(message.closeMainWindow);
        }
        if (message.showHud !== undefined) {
            obj.showHud = common_1.AckResponse.toJSON(message.showHud);
        }
        if (message.setSearchText !== undefined) {
            obj.setSearchText = common_1.AckResponse.toJSON(message.setSearchText);
        }
        if (message.confirmAlert !== undefined) {
            obj.confirmAlert = exports.ConfirmAlertResponse.toJSON(message.confirmAlert);
        }
        if (message.getSelectedText !== undefined) {
            obj.getSelectedText = exports.GetSelectedTextResponse.toJSON(message.getSelectedText);
        }
        if (message.popToRoot !== undefined) {
            obj.popToRoot = common_1.AckResponse.toJSON(message.popToRoot);
        }
        return obj;
    },
    create(base) {
        return exports.Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponse();
        message.render = (object.render !== undefined && object.render !== null)
            ? common_1.AckResponse.fromPartial(object.render)
            : undefined;
        message.showToast = (object.showToast !== undefined && object.showToast !== null)
            ? common_1.AckResponse.fromPartial(object.showToast)
            : undefined;
        message.hideToast = (object.hideToast !== undefined && object.hideToast !== null)
            ? common_1.AckResponse.fromPartial(object.hideToast)
            : undefined;
        message.updateToast = (object.updateToast !== undefined && object.updateToast !== null)
            ? common_1.AckResponse.fromPartial(object.updateToast)
            : undefined;
        message.pushView = (object.pushView !== undefined && object.pushView !== null)
            ? common_1.AckResponse.fromPartial(object.pushView)
            : undefined;
        message.popView = (object.popView !== undefined && object.popView !== null)
            ? common_1.AckResponse.fromPartial(object.popView)
            : undefined;
        message.clearSearch = (object.clearSearch !== undefined && object.clearSearch !== null)
            ? common_1.AckResponse.fromPartial(object.clearSearch)
            : undefined;
        message.closeMainWindow = (object.closeMainWindow !== undefined && object.closeMainWindow !== null)
            ? common_1.AckResponse.fromPartial(object.closeMainWindow)
            : undefined;
        message.showHud = (object.showHud !== undefined && object.showHud !== null)
            ? common_1.AckResponse.fromPartial(object.showHud)
            : undefined;
        message.setSearchText = (object.setSearchText !== undefined && object.setSearchText !== null)
            ? common_1.AckResponse.fromPartial(object.setSearchText)
            : undefined;
        message.confirmAlert = (object.confirmAlert !== undefined && object.confirmAlert !== null)
            ? exports.ConfirmAlertResponse.fromPartial(object.confirmAlert)
            : undefined;
        message.getSelectedText = (object.getSelectedText !== undefined && object.getSelectedText !== null)
            ? exports.GetSelectedTextResponse.fromPartial(object.getSelectedText)
            : undefined;
        message.popToRoot = (object.popToRoot !== undefined && object.popToRoot !== null)
            ? common_1.AckResponse.fromPartial(object.popToRoot)
            : undefined;
        return message;
    },
};
function createBaseRenderNode() {
    return { type: "", hasDirtyChild: false, hasDirtyProps: false, props: {}, children: [] };
}
exports.RenderNode = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.hasDirtyChild !== false) {
            writer.uint32(16).bool(message.hasDirtyChild);
        }
        if (message.hasDirtyProps !== false) {
            writer.uint32(24).bool(message.hasDirtyProps);
        }
        Object.entries(message.props).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.RenderNode_PropsEntry.encode({ key: key, value }, writer.uint32(34).fork()).join();
            }
        });
        for (const v of message.children) {
            exports.RenderNode.encode(v, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRenderNode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.hasDirtyChild = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.hasDirtyProps = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    const entry4 = exports.RenderNode_PropsEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.props[entry4.key] = entry4.value;
                    }
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.children.push(exports.RenderNode.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            hasDirtyChild: isSet(object.hasDirtyChild) ? globalThis.Boolean(object.hasDirtyChild) : false,
            hasDirtyProps: isSet(object.hasDirtyProps) ? globalThis.Boolean(object.hasDirtyProps) : false,
            props: isObject(object.props)
                ? Object.entries(object.props).reduce((acc, [key, value]) => {
                    acc[key] = value;
                    return acc;
                }, {})
                : {},
            children: globalThis.Array.isArray(object?.children)
                ? object.children.map((e) => exports.RenderNode.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.hasDirtyChild !== false) {
            obj.hasDirtyChild = message.hasDirtyChild;
        }
        if (message.hasDirtyProps !== false) {
            obj.hasDirtyProps = message.hasDirtyProps;
        }
        if (message.props) {
            const entries = Object.entries(message.props);
            if (entries.length > 0) {
                obj.props = {};
                entries.forEach(([k, v]) => {
                    obj.props[k] = v;
                });
            }
        }
        if (message.children?.length) {
            obj.children = message.children.map((e) => exports.RenderNode.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.RenderNode.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRenderNode();
        message.type = object.type ?? "";
        message.hasDirtyChild = object.hasDirtyChild ?? false;
        message.hasDirtyProps = object.hasDirtyProps ?? false;
        message.props = Object.entries(object.props ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        message.children = object.children?.map((e) => exports.RenderNode.fromPartial(e)) || [];
        return message;
    },
};
function createBaseRenderNode_PropsEntry() {
    return { key: "", value: undefined };
}
exports.RenderNode_PropsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRenderNode_PropsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.RenderNode_PropsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRenderNode_PropsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? undefined;
        return message;
    },
};
function createBaseThemedImageSource() {
    return { light: "", dark: "" };
}
exports.ThemedImageSource = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.light !== "") {
            writer.uint32(10).string(message.light);
        }
        if (message.dark !== "") {
            writer.uint32(18).string(message.dark);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseThemedImageSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.light = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.dark = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            light: isSet(object.light) ? globalThis.String(object.light) : "",
            dark: isSet(object.dark) ? globalThis.String(object.dark) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.light !== "") {
            obj.light = message.light;
        }
        if (message.dark !== "") {
            obj.dark = message.dark;
        }
        return obj;
    },
    create(base) {
        return exports.ThemedImageSource.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseThemedImageSource();
        message.light = object.light ?? "";
        message.dark = object.dark ?? "";
        return message;
    },
};
function createBaseImageSource() {
    return { raw: undefined, themed: undefined };
}
exports.ImageSource = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.raw !== undefined) {
            writer.uint32(10).string(message.raw);
        }
        if (message.themed !== undefined) {
            exports.ThemedImageSource.encode(message.themed, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImageSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.raw = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.themed = exports.ThemedImageSource.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            raw: isSet(object.raw) ? globalThis.String(object.raw) : undefined,
            themed: isSet(object.themed) ? exports.ThemedImageSource.fromJSON(object.themed) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.raw !== undefined) {
            obj.raw = message.raw;
        }
        if (message.themed !== undefined) {
            obj.themed = exports.ThemedImageSource.toJSON(message.themed);
        }
        return obj;
    },
    create(base) {
        return exports.ImageSource.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImageSource();
        message.raw = object.raw ?? undefined;
        message.themed = (object.themed !== undefined && object.themed !== null)
            ? exports.ThemedImageSource.fromPartial(object.themed)
            : undefined;
        return message;
    },
};
function createBaseImage() {
    return { source: undefined, fallback: undefined, mask: undefined, colorTint: undefined };
}
exports.Image = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.source !== undefined) {
            exports.ImageSource.encode(message.source, writer.uint32(10).fork()).join();
        }
        if (message.fallback !== undefined) {
            exports.ImageSource.encode(message.fallback, writer.uint32(18).fork()).join();
        }
        if (message.mask !== undefined) {
            writer.uint32(24).int32(message.mask);
        }
        if (message.colorTint !== undefined) {
            writer.uint32(34).string(message.colorTint);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.source = exports.ImageSource.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.fallback = exports.ImageSource.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.mask = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.colorTint = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            source: isSet(object.source) ? exports.ImageSource.fromJSON(object.source) : undefined,
            fallback: isSet(object.fallback) ? exports.ImageSource.fromJSON(object.fallback) : undefined,
            mask: isSet(object.mask) ? imageMaskFromJSON(object.mask) : undefined,
            colorTint: isSet(object.colorTint) ? globalThis.String(object.colorTint) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.source !== undefined) {
            obj.source = exports.ImageSource.toJSON(message.source);
        }
        if (message.fallback !== undefined) {
            obj.fallback = exports.ImageSource.toJSON(message.fallback);
        }
        if (message.mask !== undefined) {
            obj.mask = imageMaskToJSON(message.mask);
        }
        if (message.colorTint !== undefined) {
            obj.colorTint = message.colorTint;
        }
        return obj;
    },
    create(base) {
        return exports.Image.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImage();
        message.source = (object.source !== undefined && object.source !== null)
            ? exports.ImageSource.fromPartial(object.source)
            : undefined;
        message.fallback = (object.fallback !== undefined && object.fallback !== null)
            ? exports.ImageSource.fromPartial(object.fallback)
            : undefined;
        message.mask = object.mask ?? undefined;
        message.colorTint = object.colorTint ?? undefined;
        return message;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
