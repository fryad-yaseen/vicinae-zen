"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: wlr-clipboard.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Selection = exports.Offer = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "proto.ext.wlrclip";
function createBaseOffer() {
    return { data: new Uint8Array(0), mimeType: "" };
}
exports.Offer = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        if (message.mimeType !== "") {
            writer.uint32(18).string(message.mimeType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOffer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.mimeType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
            mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        if (message.mimeType !== "") {
            obj.mimeType = message.mimeType;
        }
        return obj;
    },
    create(base) {
        return exports.Offer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOffer();
        message.data = object.data ?? new Uint8Array(0);
        message.mimeType = object.mimeType ?? "";
        return message;
    },
};
function createBaseSelection() {
    return { offers: [] };
}
exports.Selection = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.offers) {
            exports.Offer.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSelection();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.offers.push(exports.Offer.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { offers: globalThis.Array.isArray(object?.offers) ? object.offers.map((e) => exports.Offer.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.offers?.length) {
            obj.offers = message.offers.map((e) => exports.Offer.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Selection.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSelection();
        message.offers = object.offers?.map((e) => exports.Offer.fromPartial(e)) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
