import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Application } from "./application";
export declare const protobufPackage = "proto.ext.wm";
export interface Window {
    id: string;
    workspaceId: string;
    active: boolean;
    fullscreen: boolean;
    x: number;
    y: number;
    width: number;
    height: number;
    app?: Application | undefined;
}
export interface Workspace {
    id: string;
    name: string;
    active: boolean;
    fullscreen: boolean;
    monitor: string;
}
export interface PingRequest {
}
export interface PingResponse {
    ok: boolean;
}
export interface GetActiveWindowRequest {
}
export interface GetActiveWindowResponse {
    window: Window | undefined;
}
export interface GetWorkspacesRequest {
}
export interface GetWorkspacesResponse {
    workspaces: Workspace[];
}
export interface GetActiveWorkspaceRequest {
}
export interface GetActiveWorkspaceResponse {
    workspace: Workspace | undefined;
}
export interface GetActiveWorkspaceWindowsRequest {
}
export interface GetActiveWorkspaceWindowsResponse {
    windows: Window[];
}
export interface GetWindowsRequest {
    workspaceId?: string | undefined;
}
export interface GetWindowsResponse {
    windows: Window[];
}
export interface SetWindowBoundsRequest {
    id: string;
    workspaceId?: string | undefined;
}
export interface SetWindowBoundsResponse {
}
export interface Request {
    ping?: PingRequest | undefined;
    getActiveWindow?: GetActiveWindowRequest | undefined;
    getActiveWorkspace?: GetActiveWorkspaceRequest | undefined;
    getWindows?: GetWindowsRequest | undefined;
    getWorkspaces?: GetWorkspacesRequest | undefined;
    setWindowBounds?: SetWindowBoundsRequest | undefined;
}
export interface Response {
    ping?: PingResponse | undefined;
    getActiveWindow?: GetActiveWindowResponse | undefined;
    getActiveWorkspace?: GetActiveWorkspaceResponse | undefined;
    getWindows?: GetWindowsResponse | undefined;
    getWorkspaces?: GetWorkspacesResponse | undefined;
    setWindowBounds?: SetWindowBoundsResponse | undefined;
}
export declare const Window: MessageFns<Window>;
export declare const Workspace: MessageFns<Workspace>;
export declare const PingRequest: MessageFns<PingRequest>;
export declare const PingResponse: MessageFns<PingResponse>;
export declare const GetActiveWindowRequest: MessageFns<GetActiveWindowRequest>;
export declare const GetActiveWindowResponse: MessageFns<GetActiveWindowResponse>;
export declare const GetWorkspacesRequest: MessageFns<GetWorkspacesRequest>;
export declare const GetWorkspacesResponse: MessageFns<GetWorkspacesResponse>;
export declare const GetActiveWorkspaceRequest: MessageFns<GetActiveWorkspaceRequest>;
export declare const GetActiveWorkspaceResponse: MessageFns<GetActiveWorkspaceResponse>;
export declare const GetActiveWorkspaceWindowsRequest: MessageFns<GetActiveWorkspaceWindowsRequest>;
export declare const GetActiveWorkspaceWindowsResponse: MessageFns<GetActiveWorkspaceWindowsResponse>;
export declare const GetWindowsRequest: MessageFns<GetWindowsRequest>;
export declare const GetWindowsResponse: MessageFns<GetWindowsResponse>;
export declare const SetWindowBoundsRequest: MessageFns<SetWindowBoundsRequest>;
export declare const SetWindowBoundsResponse: MessageFns<SetWindowBoundsResponse>;
export declare const Request: MessageFns<Request>;
export declare const Response: MessageFns<Response>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
