"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: wm.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Response = exports.Request = exports.SetWindowBoundsResponse = exports.SetWindowBoundsRequest = exports.GetWindowsResponse = exports.GetWindowsRequest = exports.GetActiveWorkspaceWindowsResponse = exports.GetActiveWorkspaceWindowsRequest = exports.GetActiveWorkspaceResponse = exports.GetActiveWorkspaceRequest = exports.GetWorkspacesResponse = exports.GetWorkspacesRequest = exports.GetActiveWindowResponse = exports.GetActiveWindowRequest = exports.PingResponse = exports.PingRequest = exports.Workspace = exports.Window = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const application_1 = require("./application");
exports.protobufPackage = "proto.ext.wm";
function createBaseWindow() {
    return { id: "", workspaceId: "", active: false, fullscreen: false, x: 0, y: 0, width: 0, height: 0, app: undefined };
}
exports.Window = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.workspaceId !== "") {
            writer.uint32(18).string(message.workspaceId);
        }
        if (message.active !== false) {
            writer.uint32(24).bool(message.active);
        }
        if (message.fullscreen !== false) {
            writer.uint32(32).bool(message.fullscreen);
        }
        if (message.x !== 0) {
            writer.uint32(40).int32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(48).int32(message.y);
        }
        if (message.width !== 0) {
            writer.uint32(56).int32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(64).int32(message.height);
        }
        if (message.app !== undefined) {
            application_1.Application.encode(message.app, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWindow();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.workspaceId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.active = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.fullscreen = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.x = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.y = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.app = application_1.Application.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            workspaceId: isSet(object.workspaceId) ? globalThis.String(object.workspaceId) : "",
            active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
            fullscreen: isSet(object.fullscreen) ? globalThis.Boolean(object.fullscreen) : false,
            x: isSet(object.x) ? globalThis.Number(object.x) : 0,
            y: isSet(object.y) ? globalThis.Number(object.y) : 0,
            width: isSet(object.width) ? globalThis.Number(object.width) : 0,
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
            app: isSet(object.app) ? application_1.Application.fromJSON(object.app) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.workspaceId !== "") {
            obj.workspaceId = message.workspaceId;
        }
        if (message.active !== false) {
            obj.active = message.active;
        }
        if (message.fullscreen !== false) {
            obj.fullscreen = message.fullscreen;
        }
        if (message.x !== 0) {
            obj.x = Math.round(message.x);
        }
        if (message.y !== 0) {
            obj.y = Math.round(message.y);
        }
        if (message.width !== 0) {
            obj.width = Math.round(message.width);
        }
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        if (message.app !== undefined) {
            obj.app = application_1.Application.toJSON(message.app);
        }
        return obj;
    },
    create(base) {
        return exports.Window.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWindow();
        message.id = object.id ?? "";
        message.workspaceId = object.workspaceId ?? "";
        message.active = object.active ?? false;
        message.fullscreen = object.fullscreen ?? false;
        message.x = object.x ?? 0;
        message.y = object.y ?? 0;
        message.width = object.width ?? 0;
        message.height = object.height ?? 0;
        message.app = (object.app !== undefined && object.app !== null) ? application_1.Application.fromPartial(object.app) : undefined;
        return message;
    },
};
function createBaseWorkspace() {
    return { id: "", name: "", active: false, fullscreen: false, monitor: "" };
}
exports.Workspace = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.active !== false) {
            writer.uint32(24).bool(message.active);
        }
        if (message.fullscreen !== false) {
            writer.uint32(32).bool(message.fullscreen);
        }
        if (message.monitor !== "") {
            writer.uint32(42).string(message.monitor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWorkspace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.active = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.fullscreen = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.monitor = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
            fullscreen: isSet(object.fullscreen) ? globalThis.Boolean(object.fullscreen) : false,
            monitor: isSet(object.monitor) ? globalThis.String(object.monitor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.active !== false) {
            obj.active = message.active;
        }
        if (message.fullscreen !== false) {
            obj.fullscreen = message.fullscreen;
        }
        if (message.monitor !== "") {
            obj.monitor = message.monitor;
        }
        return obj;
    },
    create(base) {
        return exports.Workspace.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWorkspace();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.active = object.active ?? false;
        message.fullscreen = object.fullscreen ?? false;
        message.monitor = object.monitor ?? "";
        return message;
    },
};
function createBasePingRequest() {
    return {};
}
exports.PingRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.PingRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBasePingRequest();
        return message;
    },
};
function createBasePingResponse() {
    return { ok: false };
}
exports.PingResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ok !== false) {
            writer.uint32(8).bool(message.ok);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.ok = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ok: isSet(object.ok) ? globalThis.Boolean(object.ok) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.ok !== false) {
            obj.ok = message.ok;
        }
        return obj;
    },
    create(base) {
        return exports.PingResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePingResponse();
        message.ok = object.ok ?? false;
        return message;
    },
};
function createBaseGetActiveWindowRequest() {
    return {};
}
exports.GetActiveWindowRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveWindowRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetActiveWindowRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetActiveWindowRequest();
        return message;
    },
};
function createBaseGetActiveWindowResponse() {
    return { window: undefined };
}
exports.GetActiveWindowResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.window !== undefined) {
            exports.Window.encode(message.window, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveWindowResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.window = exports.Window.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { window: isSet(object.window) ? exports.Window.fromJSON(object.window) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.window !== undefined) {
            obj.window = exports.Window.toJSON(message.window);
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveWindowResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetActiveWindowResponse();
        message.window = (object.window !== undefined && object.window !== null)
            ? exports.Window.fromPartial(object.window)
            : undefined;
        return message;
    },
};
function createBaseGetWorkspacesRequest() {
    return {};
}
exports.GetWorkspacesRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWorkspacesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetWorkspacesRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetWorkspacesRequest();
        return message;
    },
};
function createBaseGetWorkspacesResponse() {
    return { workspaces: [] };
}
exports.GetWorkspacesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.workspaces) {
            exports.Workspace.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWorkspacesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.workspaces.push(exports.Workspace.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            workspaces: globalThis.Array.isArray(object?.workspaces)
                ? object.workspaces.map((e) => exports.Workspace.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.workspaces?.length) {
            obj.workspaces = message.workspaces.map((e) => exports.Workspace.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetWorkspacesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetWorkspacesResponse();
        message.workspaces = object.workspaces?.map((e) => exports.Workspace.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetActiveWorkspaceRequest() {
    return {};
}
exports.GetActiveWorkspaceRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveWorkspaceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetActiveWorkspaceRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetActiveWorkspaceRequest();
        return message;
    },
};
function createBaseGetActiveWorkspaceResponse() {
    return { workspace: undefined };
}
exports.GetActiveWorkspaceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.workspace !== undefined) {
            exports.Workspace.encode(message.workspace, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveWorkspaceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.workspace = exports.Workspace.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { workspace: isSet(object.workspace) ? exports.Workspace.fromJSON(object.workspace) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.workspace !== undefined) {
            obj.workspace = exports.Workspace.toJSON(message.workspace);
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveWorkspaceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetActiveWorkspaceResponse();
        message.workspace = (object.workspace !== undefined && object.workspace !== null)
            ? exports.Workspace.fromPartial(object.workspace)
            : undefined;
        return message;
    },
};
function createBaseGetActiveWorkspaceWindowsRequest() {
    return {};
}
exports.GetActiveWorkspaceWindowsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveWorkspaceWindowsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetActiveWorkspaceWindowsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetActiveWorkspaceWindowsRequest();
        return message;
    },
};
function createBaseGetActiveWorkspaceWindowsResponse() {
    return { windows: [] };
}
exports.GetActiveWorkspaceWindowsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.windows) {
            exports.Window.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveWorkspaceWindowsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.windows.push(exports.Window.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            windows: globalThis.Array.isArray(object?.windows) ? object.windows.map((e) => exports.Window.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.windows?.length) {
            obj.windows = message.windows.map((e) => exports.Window.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveWorkspaceWindowsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetActiveWorkspaceWindowsResponse();
        message.windows = object.windows?.map((e) => exports.Window.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetWindowsRequest() {
    return { workspaceId: undefined };
}
exports.GetWindowsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.workspaceId !== undefined) {
            writer.uint32(10).string(message.workspaceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWindowsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.workspaceId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { workspaceId: isSet(object.workspaceId) ? globalThis.String(object.workspaceId) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.workspaceId !== undefined) {
            obj.workspaceId = message.workspaceId;
        }
        return obj;
    },
    create(base) {
        return exports.GetWindowsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetWindowsRequest();
        message.workspaceId = object.workspaceId ?? undefined;
        return message;
    },
};
function createBaseGetWindowsResponse() {
    return { windows: [] };
}
exports.GetWindowsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.windows) {
            exports.Window.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWindowsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.windows.push(exports.Window.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            windows: globalThis.Array.isArray(object?.windows) ? object.windows.map((e) => exports.Window.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.windows?.length) {
            obj.windows = message.windows.map((e) => exports.Window.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetWindowsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetWindowsResponse();
        message.windows = object.windows?.map((e) => exports.Window.fromPartial(e)) || [];
        return message;
    },
};
function createBaseSetWindowBoundsRequest() {
    return { id: "", workspaceId: undefined };
}
exports.SetWindowBoundsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.workspaceId !== undefined) {
            writer.uint32(26).string(message.workspaceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetWindowBoundsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.workspaceId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            workspaceId: isSet(object.workspaceId) ? globalThis.String(object.workspaceId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.workspaceId !== undefined) {
            obj.workspaceId = message.workspaceId;
        }
        return obj;
    },
    create(base) {
        return exports.SetWindowBoundsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetWindowBoundsRequest();
        message.id = object.id ?? "";
        message.workspaceId = object.workspaceId ?? undefined;
        return message;
    },
};
function createBaseSetWindowBoundsResponse() {
    return {};
}
exports.SetWindowBoundsResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetWindowBoundsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.SetWindowBoundsResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSetWindowBoundsResponse();
        return message;
    },
};
function createBaseRequest() {
    return {
        ping: undefined,
        getActiveWindow: undefined,
        getActiveWorkspace: undefined,
        getWindows: undefined,
        getWorkspaces: undefined,
        setWindowBounds: undefined,
    };
}
exports.Request = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ping !== undefined) {
            exports.PingRequest.encode(message.ping, writer.uint32(10).fork()).join();
        }
        if (message.getActiveWindow !== undefined) {
            exports.GetActiveWindowRequest.encode(message.getActiveWindow, writer.uint32(18).fork()).join();
        }
        if (message.getActiveWorkspace !== undefined) {
            exports.GetActiveWorkspaceRequest.encode(message.getActiveWorkspace, writer.uint32(26).fork()).join();
        }
        if (message.getWindows !== undefined) {
            exports.GetWindowsRequest.encode(message.getWindows, writer.uint32(34).fork()).join();
        }
        if (message.getWorkspaces !== undefined) {
            exports.GetWorkspacesRequest.encode(message.getWorkspaces, writer.uint32(42).fork()).join();
        }
        if (message.setWindowBounds !== undefined) {
            exports.SetWindowBoundsRequest.encode(message.setWindowBounds, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ping = exports.PingRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.getActiveWindow = exports.GetActiveWindowRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.getActiveWorkspace = exports.GetActiveWorkspaceRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.getWindows = exports.GetWindowsRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.getWorkspaces = exports.GetWorkspacesRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.setWindowBounds = exports.SetWindowBoundsRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ping: isSet(object.ping) ? exports.PingRequest.fromJSON(object.ping) : undefined,
            getActiveWindow: isSet(object.getActiveWindow)
                ? exports.GetActiveWindowRequest.fromJSON(object.getActiveWindow)
                : undefined,
            getActiveWorkspace: isSet(object.getActiveWorkspace)
                ? exports.GetActiveWorkspaceRequest.fromJSON(object.getActiveWorkspace)
                : undefined,
            getWindows: isSet(object.getWindows) ? exports.GetWindowsRequest.fromJSON(object.getWindows) : undefined,
            getWorkspaces: isSet(object.getWorkspaces) ? exports.GetWorkspacesRequest.fromJSON(object.getWorkspaces) : undefined,
            setWindowBounds: isSet(object.setWindowBounds)
                ? exports.SetWindowBoundsRequest.fromJSON(object.setWindowBounds)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ping !== undefined) {
            obj.ping = exports.PingRequest.toJSON(message.ping);
        }
        if (message.getActiveWindow !== undefined) {
            obj.getActiveWindow = exports.GetActiveWindowRequest.toJSON(message.getActiveWindow);
        }
        if (message.getActiveWorkspace !== undefined) {
            obj.getActiveWorkspace = exports.GetActiveWorkspaceRequest.toJSON(message.getActiveWorkspace);
        }
        if (message.getWindows !== undefined) {
            obj.getWindows = exports.GetWindowsRequest.toJSON(message.getWindows);
        }
        if (message.getWorkspaces !== undefined) {
            obj.getWorkspaces = exports.GetWorkspacesRequest.toJSON(message.getWorkspaces);
        }
        if (message.setWindowBounds !== undefined) {
            obj.setWindowBounds = exports.SetWindowBoundsRequest.toJSON(message.setWindowBounds);
        }
        return obj;
    },
    create(base) {
        return exports.Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequest();
        message.ping = (object.ping !== undefined && object.ping !== null)
            ? exports.PingRequest.fromPartial(object.ping)
            : undefined;
        message.getActiveWindow = (object.getActiveWindow !== undefined && object.getActiveWindow !== null)
            ? exports.GetActiveWindowRequest.fromPartial(object.getActiveWindow)
            : undefined;
        message.getActiveWorkspace = (object.getActiveWorkspace !== undefined && object.getActiveWorkspace !== null)
            ? exports.GetActiveWorkspaceRequest.fromPartial(object.getActiveWorkspace)
            : undefined;
        message.getWindows = (object.getWindows !== undefined && object.getWindows !== null)
            ? exports.GetWindowsRequest.fromPartial(object.getWindows)
            : undefined;
        message.getWorkspaces = (object.getWorkspaces !== undefined && object.getWorkspaces !== null)
            ? exports.GetWorkspacesRequest.fromPartial(object.getWorkspaces)
            : undefined;
        message.setWindowBounds = (object.setWindowBounds !== undefined && object.setWindowBounds !== null)
            ? exports.SetWindowBoundsRequest.fromPartial(object.setWindowBounds)
            : undefined;
        return message;
    },
};
function createBaseResponse() {
    return {
        ping: undefined,
        getActiveWindow: undefined,
        getActiveWorkspace: undefined,
        getWindows: undefined,
        getWorkspaces: undefined,
        setWindowBounds: undefined,
    };
}
exports.Response = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ping !== undefined) {
            exports.PingResponse.encode(message.ping, writer.uint32(10).fork()).join();
        }
        if (message.getActiveWindow !== undefined) {
            exports.GetActiveWindowResponse.encode(message.getActiveWindow, writer.uint32(18).fork()).join();
        }
        if (message.getActiveWorkspace !== undefined) {
            exports.GetActiveWorkspaceResponse.encode(message.getActiveWorkspace, writer.uint32(26).fork()).join();
        }
        if (message.getWindows !== undefined) {
            exports.GetWindowsResponse.encode(message.getWindows, writer.uint32(34).fork()).join();
        }
        if (message.getWorkspaces !== undefined) {
            exports.GetWorkspacesResponse.encode(message.getWorkspaces, writer.uint32(42).fork()).join();
        }
        if (message.setWindowBounds !== undefined) {
            exports.SetWindowBoundsResponse.encode(message.setWindowBounds, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ping = exports.PingResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.getActiveWindow = exports.GetActiveWindowResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.getActiveWorkspace = exports.GetActiveWorkspaceResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.getWindows = exports.GetWindowsResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.getWorkspaces = exports.GetWorkspacesResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.setWindowBounds = exports.SetWindowBoundsResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ping: isSet(object.ping) ? exports.PingResponse.fromJSON(object.ping) : undefined,
            getActiveWindow: isSet(object.getActiveWindow)
                ? exports.GetActiveWindowResponse.fromJSON(object.getActiveWindow)
                : undefined,
            getActiveWorkspace: isSet(object.getActiveWorkspace)
                ? exports.GetActiveWorkspaceResponse.fromJSON(object.getActiveWorkspace)
                : undefined,
            getWindows: isSet(object.getWindows) ? exports.GetWindowsResponse.fromJSON(object.getWindows) : undefined,
            getWorkspaces: isSet(object.getWorkspaces) ? exports.GetWorkspacesResponse.fromJSON(object.getWorkspaces) : undefined,
            setWindowBounds: isSet(object.setWindowBounds)
                ? exports.SetWindowBoundsResponse.fromJSON(object.setWindowBounds)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ping !== undefined) {
            obj.ping = exports.PingResponse.toJSON(message.ping);
        }
        if (message.getActiveWindow !== undefined) {
            obj.getActiveWindow = exports.GetActiveWindowResponse.toJSON(message.getActiveWindow);
        }
        if (message.getActiveWorkspace !== undefined) {
            obj.getActiveWorkspace = exports.GetActiveWorkspaceResponse.toJSON(message.getActiveWorkspace);
        }
        if (message.getWindows !== undefined) {
            obj.getWindows = exports.GetWindowsResponse.toJSON(message.getWindows);
        }
        if (message.getWorkspaces !== undefined) {
            obj.getWorkspaces = exports.GetWorkspacesResponse.toJSON(message.getWorkspaces);
        }
        if (message.setWindowBounds !== undefined) {
            obj.setWindowBounds = exports.SetWindowBoundsResponse.toJSON(message.setWindowBounds);
        }
        return obj;
    },
    create(base) {
        return exports.Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponse();
        message.ping = (object.ping !== undefined && object.ping !== null)
            ? exports.PingResponse.fromPartial(object.ping)
            : undefined;
        message.getActiveWindow = (object.getActiveWindow !== undefined && object.getActiveWindow !== null)
            ? exports.GetActiveWindowResponse.fromPartial(object.getActiveWindow)
            : undefined;
        message.getActiveWorkspace = (object.getActiveWorkspace !== undefined && object.getActiveWorkspace !== null)
            ? exports.GetActiveWorkspaceResponse.fromPartial(object.getActiveWorkspace)
            : undefined;
        message.getWindows = (object.getWindows !== undefined && object.getWindows !== null)
            ? exports.GetWindowsResponse.fromPartial(object.getWindows)
            : undefined;
        message.getWorkspaces = (object.getWorkspaces !== undefined && object.getWorkspaces !== null)
            ? exports.GetWorkspacesResponse.fromPartial(object.getWorkspaces)
            : undefined;
        message.setWindowBounds = (object.setWindowBounds !== undefined && object.setWindowBounds !== null)
            ? exports.SetWindowBoundsResponse.fromPartial(object.setWindowBounds)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
