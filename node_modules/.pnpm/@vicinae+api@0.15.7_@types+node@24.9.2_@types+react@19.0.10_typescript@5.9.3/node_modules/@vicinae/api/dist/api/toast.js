"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.showToast = exports.Toast = void 0;
const crypto_1 = require("crypto");
const bus_1 = require("./bus");
const ui = __importStar(require("./proto/ui"));
/**
 * A Toast with a certain style, title, and message.
 *
 * @example
 * ```typescript
 * import { showToast, Toast } from "@raycast/api";
 * import { setTimeout } from "timers/promises";
 *
 * export default async () => {
 *   const toast = await showToast({ style: Toast.Style.Animated, title: "Uploading image" });
 *
 *   await setTimeout(1000);
 *
 *   toast.style = Toast.Style.Success;
 *   toast.title = "Uploaded image";
 * };
 * ```
 */
class Toast {
    options;
    callbacks = {};
    id;
    styleMap = {
        [Toast.Style.Success]: ui.ToastStyle.Success,
        [Toast.Style.Failure]: ui.ToastStyle.Error,
        [Toast.Style.Animated]: ui.ToastStyle.Dynamic,
    };
    /**
     * Deprecated - Use `showToast` instead
     */
    constructor(props) {
        this.id = `toast_${(0, crypto_1.randomBytes)(16).toString("hex")}`;
        this.options = {
            title: props.title,
            style: props.style ?? Toast.Style.Success,
            message: props.message,
        };
        if (props.primaryAction) {
            const { onAction } = props.primaryAction;
            const { id } = bus_1.bus.addEventHandler(() => onAction(this));
            this.options.primaryAction = props.primaryAction;
            this.callbacks.primary = id;
        }
        if (props.secondaryAction) {
            const { onAction } = props.secondaryAction;
            const { id } = bus_1.bus.addEventHandler(() => onAction(this));
            this.options.secondaryAction = props.secondaryAction;
            this.callbacks.secondary = id;
        }
    }
    /**
     * The style of a Toast.
     */
    get style() {
        return this.options.style;
    }
    set style(style) {
        this.options.style = style;
        this.update();
    }
    /**
     * The title of a Toast. Displayed on the top.
     */
    get title() {
        return this.options.title;
    }
    set title(title) {
        this.options.title = title;
        this.update();
    }
    /**
     * An additional message for the Toast. Useful to show more information, e.g. an identifier of a newly created asset.
     */
    get message() {
        return this.options.message;
    }
    set message(message) {
        this.options.message = message;
    }
    /**
     * The primary Action the user can take when hovering on the Toast.
     */
    get primaryAction() {
        return this.options.primaryAction;
    }
    set primaryAction(action) {
        this.options.primaryAction = action;
    }
    /**
     * The secondary Action the user can take when hovering on the Toast.
     */
    get secondaryAction() {
        return this.options.secondaryAction;
    }
    set secondaryAction(action) {
        this.options.secondaryAction = action;
    }
    async update() {
        await bus_1.bus.turboRequest("ui.showToast", {
            id: this.id,
            title: this.title,
            style: this.styleMap[this.style],
        });
    }
    /**
     * Shows the Toast.
     *
     * @returns A Promise that resolves when the toast is shown.
     */
    async show() {
        const payload = {
            title: this.options.title,
            message: this.options.message,
            style: this.options.style,
        };
        if (this.options.primaryAction && this.callbacks.primary) {
            const { title, shortcut } = this.options.primaryAction;
            payload.primaryAction = {
                title,
                shortcut,
                onAction: this.callbacks.primary,
            };
        }
        if (this.options.secondaryAction && this.callbacks.secondary) {
            const { title, shortcut } = this.options.secondaryAction;
            payload.secondaryAction = {
                title,
                shortcut,
                onAction: this.callbacks.secondary,
            };
        }
        await bus_1.bus.turboRequest("ui.showToast", {
            id: this.id,
            title: payload.title,
            style: this.styleMap[payload.style ?? Toast.Style.Success],
        });
    }
    /**
     * Hides the Toast.
     *
     * @returns A Promise that resolves when toast is hidden.
     */
    async hide() {
        await bus_1.bus.turboRequest("ui.hideToast", { id: this.id });
    }
}
exports.Toast = Toast;
(function (Toast) {
    /**
     * Defines the visual style of the Toast.
     *
     * @remarks
     * Use {@link Toast.Style.Success} for confirmations and {@link Toast.Style.Failure} for displaying errors.
     * Use {@link Toast.Style.Animated} when your Toast should be shown until a process is completed.
     * You can hide it later by using {@link Toast.hide} or update the properties of an existing Toast.
     */
    let Style;
    (function (Style) {
        Style["Success"] = "success";
        Style["Failure"] = "failure";
        Style["Animated"] = "animated";
    })(Style = Toast.Style || (Toast.Style = {}));
})(Toast || (exports.Toast = Toast = {}));
const showToast = async (init, title = "", message) => {
    const toast = typeof init === "string"
        ? new Toast({ style: init, message, title })
        : new Toast(init);
    await toast.show();
    return toast;
};
exports.showToast = showToast;
