"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = exports.showInFileBrowser = exports.getDefaultApplication = exports.getApplications = exports.getFrontmostApplication = exports.open = exports.trash = void 0;
const promises_1 = require("fs/promises");
const bus_1 = require("./bus");
const window_management_1 = require("./window-management");
// Linux systems usually do not have a trash, but maybe we should support one...
const trash = async (path) => {
    const targets = Array.isArray(path) ? path : [path];
    const promises = targets.map((p) => (0, promises_1.rm)(p, { recursive: true }));
    await Promise.all(promises);
};
exports.trash = trash;
const open = async (target, app) => {
    let appId;
    if (app) {
        if (typeof app === "string") {
            appId = app;
        }
        else {
            appId = app.id;
        }
    }
    await bus_1.bus.turboRequest("app.open", {
        target,
        appId,
    });
};
exports.open = open;
const getFrontmostApplication = async () => {
    const { application } = await window_management_1.WindowManagement.getActiveWindow();
    if (!application) {
        throw new Error(`Could not get frontmost application`);
    }
    return application;
};
exports.getFrontmostApplication = getFrontmostApplication;
const getApplications = async (target) => {
    const res = await bus_1.bus.turboRequest("app.list", { target });
    return res.unwrap().apps;
};
exports.getApplications = getApplications;
const getDefaultApplication = async (path) => {
    const res = await bus_1.bus.turboRequest('app.getDefault', { target: path });
    const app = res.unwrap().app;
    if (!app)
        throw new Error(`No default application for target ${path}`);
    return app;
};
exports.getDefaultApplication = getDefaultApplication;
const showInFileBrowser = async (path) => {
    const fileBrowser = await (0, exports.getDefaultApplication)("inode/directory"); // FIXME: we may want something more robust
    await (0, exports.open)(path.toString(), fileBrowser);
};
exports.showInFileBrowser = showInFileBrowser;
var application_1 = require("./proto/application");
Object.defineProperty(exports, "Application", { enumerable: true, get: function () { return application_1.Application; } });
