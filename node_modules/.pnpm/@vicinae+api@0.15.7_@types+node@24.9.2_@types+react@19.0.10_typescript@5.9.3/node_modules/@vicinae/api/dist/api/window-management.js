"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowManagement = void 0;
const bus_1 = require("./bus");
const transformWorkspace = (proto) => {
    return {
        id: proto.id,
        name: proto.name,
        active: proto.active,
        monitorId: proto.monitor
    };
};
const transformWindow = (proto) => {
    return {
        id: proto.id,
        workspaceId: proto.workspaceId,
        active: proto.active,
        bounds: { position: { x: proto.x, y: proto.y }, size: { width: proto.width, height: proto.height } },
        application: proto.app
    };
};
/**
 * Access Vicinae's window management features.
 *
 * @remarks
 * Window management features are available to a different degree depending on what environment vicinae runs
 * in.
 *
 * @example
 * ```typescript
 * import { WindowManagement } from '@vicinae/api';
 *
 * const windows = await WindowManagement.getWindows();
 * ```
 *
 * @public
 */
var WindowManagement;
(function (WindowManagement) {
    async function ping() {
        const res = await bus_1.bus.turboRequest('wm.ping', {});
        return res.unwrap().ok;
    }
    WindowManagement.ping = ping;
    async function getWindows(options = {}) {
        const res = await bus_1.bus.turboRequest('wm.getWindows', options);
        return res.unwrap().windows.map(transformWindow);
    }
    WindowManagement.getWindows = getWindows;
    async function getActiveWorkspace() {
        const res = await bus_1.bus.turboRequest('wm.getActiveWorkspace', {});
        return transformWorkspace(res.unwrap().workspace);
    }
    WindowManagement.getActiveWorkspace = getActiveWorkspace;
    async function getWorkspaces() {
        const res = await bus_1.bus.turboRequest('wm.getWorkspaces', {});
        return res.unwrap().workspaces.map(transformWorkspace);
    }
    WindowManagement.getWorkspaces = getWorkspaces;
    async function getWindowsOnActiveWorkspace() {
        const workspace = await getActiveWorkspace();
        return getWindows({ workspaceId: workspace.id });
    }
    WindowManagement.getWindowsOnActiveWorkspace = getWindowsOnActiveWorkspace;
    async function setWindowBounds(payload) {
        await bus_1.bus.turboRequest('wm.setWindowBounds', payload);
    }
    WindowManagement.setWindowBounds = setWindowBounds;
    async function getActiveWindow() {
        const res = await bus_1.bus.turboRequest('wm.getActiveWindow', {});
        return transformWindow(res.unwrap().window);
    }
    WindowManagement.getActiveWindow = getActiveWindow;
})(WindowManagement || (exports.WindowManagement = WindowManagement = {}));
;
