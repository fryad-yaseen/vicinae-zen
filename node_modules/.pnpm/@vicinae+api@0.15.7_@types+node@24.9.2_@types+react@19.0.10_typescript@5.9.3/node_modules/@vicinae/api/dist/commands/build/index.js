"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const esbuild = __importStar(require("esbuild"));
const node_child_process_1 = require("node:child_process");
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const logger_js_1 = require("../../utils/logger.js");
const utils_js_1 = require("../../utils/utils.js");
const manifest_js_1 = __importDefault(require("../../schemas/manifest.js"));
class Build extends core_1.Command {
    static args = {};
    static description = "Start an extension development session";
    static examples = [
        `<%= config.bin %> <%= command.id %> --target /path/to/extension`,
    ];
    static flags = {
        out: core_1.Flags.string({
            aliases: ["output"],
            char: "o",
            description: "Path to output the compiled extension bundle to. Defaults to Vicinae extension directory.",
            required: false,
        }),
        src: core_1.Flags.string({
            aliases: ["src"],
            char: "s",
            default: process.cwd(),
            defaultHelp: "The current working directory",
            description: "Path to the extension source directory",
            required: false,
        }),
    };
    async run() {
        const { flags } = await this.parse(Build);
        const logger = new logger_js_1.Logger();
        const src = flags.src ?? process.cwd();
        const pkgPath = (0, node_path_1.join)(src, "package.json");
        if (!(0, node_fs_1.existsSync)(pkgPath)) {
            logger.logError(`No package.json found at ${pkgPath}. Does this location point to a valid extension repository?`);
            process.exit(1);
        }
        const json = JSON.parse((0, node_fs_1.readFileSync)(pkgPath, "utf8"));
        const e = manifest_js_1.default.safeParse(json);
        if (e.error) {
            logger.logError(`${pkgPath} is not a valid extension manifest: ${e.error}`);
            process.exit(1);
        }
        const manifest = e.data;
        const outDir = flags.out ?? (0, node_path_1.join)((0, utils_js_1.extensionDataDir)(), manifest.name);
        const build = async (outDir) => {
            const entryPoints = manifest.commands.map((cmd) => (0, node_path_1.join)("src", `${cmd.name}.tsx`));
            logger.logInfo(`entrypoints [${entryPoints.join(", ")}]`);
            const promises = manifest.commands.map((cmd) => {
                const base = (0, node_path_1.join)(process.cwd(), "src", `${cmd.name}`);
                const tsxSource = `${base}.tsx`;
                const tsSource = `${base}.ts`;
                let source = tsxSource;
                if (cmd.mode == "view" && !(0, node_fs_1.existsSync)(tsxSource)) {
                    throw new Error(`Unable to find view command ${cmd.name} at ${tsxSource}`);
                }
                // we allow .ts or .tsx for no-view
                if (cmd.mode == "no-view") {
                    if (!(0, node_fs_1.existsSync)(tsxSource)) {
                        source = tsSource;
                        if (!(0, node_fs_1.existsSync)(tsSource)) {
                            throw new Error(`Unable to find no-view command ${cmd.name} at ${base}.{ts,tsx}`);
                        }
                    }
                }
                return esbuild.build({
                    bundle: true,
                    entryPoints: [source],
                    external: ["react", "@vicinae/api", "@raycast/api"],
                    format: "cjs",
                    outfile: (0, node_path_1.join)(outDir, `${cmd.name}.js`),
                    platform: "node",
                    minify: true,
                });
            });
            await Promise.all(promises);
            const targetPkg = (0, node_path_1.join)(outDir, "package.json");
            const targetAssets = (0, node_path_1.join)(outDir, "assets");
            (0, node_fs_1.cpSync)("package.json", targetPkg, { force: true });
            if ((0, node_fs_1.existsSync)("assets")) {
                (0, node_fs_1.cpSync)("assets", targetAssets, { force: true, recursive: true });
            }
            else {
                (0, node_fs_1.mkdirSync)(targetAssets, { recursive: true });
            }
        };
        process.chdir(src);
        logger.logInfo("Checking types...");
        const typeCheck = (0, node_child_process_1.spawnSync)("npx", ["tsc", "--noEmit"]);
        if (typeCheck.error) {
            logger.logError(`Type check failed: ${typeCheck.error}`);
            process.exit(1);
        }
        (0, node_fs_1.mkdirSync)(outDir, { recursive: true });
        await build(outDir);
        logger.logReady(`built extension successfully - output at ${outDir}`);
    }
}
exports.default = Build;
