"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const chokidar = __importStar(require("chokidar"));
const esbuild = __importStar(require("esbuild"));
const node_child_process_1 = require("node:child_process");
const node_fs_1 = require("node:fs");
const promises_1 = require("node:fs/promises");
const node_path_1 = require("node:path");
const logger_js_1 = require("../../utils/logger.js");
const utils_js_1 = require("../../utils/utils.js");
const vicinae_js_1 = require("../../utils/vicinae.js");
const manifest_js_1 = __importDefault(require("../../schemas/manifest.js"));
class Develop extends core_1.Command {
    static args = {};
    static description = "Start an extension development session";
    static examples = [
        `<%= config.bin %> <%= command.id %> --target /path/to/extension`,
    ];
    static flags = {
        target: core_1.Flags.string({
            aliases: ["input"],
            char: "i",
            default: process.cwd(),
            defaultHelp: "The current working directory",
            description: "Path to the extension directory",
            required: false,
        }),
    };
    async run() {
        const { flags } = await this.parse(Develop);
        const logger = new logger_js_1.Logger();
        const pkgPath = (0, node_path_1.join)(flags.target, "package.json");
        const parseManifest = () => {
            if (!(0, node_fs_1.existsSync)(pkgPath)) {
                logger.logError(`No package.json found at ${pkgPath}. Does this location point to a valid extension repository?`);
                process.exit(1);
            }
            const json = JSON.parse((0, node_fs_1.readFileSync)(pkgPath, "utf8"));
            const e = manifest_js_1.default.safeParse(json);
            if (e.error) {
                logger.logError(`${pkgPath} is not a valid extension manifest: ${e.error}`);
                process.exit(1);
            }
            return e.data;
        };
        let manifest = parseManifest();
        const vicinae = new vicinae_js_1.VicinaeClient();
        const typeCheck = async () => {
            const spawned = (0, node_child_process_1.spawn)("npx", ["tsc", "--noEmit"]);
            let stderr = Buffer.from("");
            return new Promise((resolve) => {
                spawned.stderr.on("data", (buf) => {
                    stderr = Buffer.concat([stderr, buf]);
                });
                spawned.on("exit", (status) => resolve({ error: stderr.toString(), ok: status === 0 }));
            });
        };
        const build = async (outDir) => {
            /*
            logger.logInfo("Started type checking in background thread");
            typeCheck().then(({ error, ok }) => {
              if (!ok) {
                logger.logInfo(`Type checking error: ${error}`);
              }
      
              logger.logInfo("Done type checking");
            });
            */
            const entryPoints = manifest.commands.map((cmd) => (0, node_path_1.join)("src", `${cmd.name}.tsx`)).filter(node_fs_1.existsSync);
            logger.logInfo(`entrypoints [${entryPoints.join(", ")}]`);
            const promises = manifest.commands.map((cmd) => {
                const base = (0, node_path_1.join)(process.cwd(), "src", `${cmd.name}`);
                const tsxSource = `${base}.tsx`;
                const tsSource = `${base}.ts`;
                let source = tsxSource;
                if (cmd.mode == "view" && !(0, node_fs_1.existsSync)(tsxSource)) {
                    throw new Error(`could not find entrypoint src/${cmd.name}.tsx for command ${cmd.name}.`);
                }
                // we allow .ts or .tsx for no-view
                if (cmd.mode == "no-view") {
                    if (!(0, node_fs_1.existsSync)(tsxSource)) {
                        source = tsSource;
                        if (!(0, node_fs_1.existsSync)(tsSource)) {
                            throw new Error(`could not find entrypoint src/${cmd.name}.{ts,tsx} for command ${cmd.name}.`);
                        }
                    }
                }
                return esbuild.build({
                    bundle: true,
                    entryPoints: [source],
                    external: ["react", "@vicinae/api", "@raycast/api"],
                    format: "cjs",
                    outfile: (0, node_path_1.join)(outDir, `${cmd.name}.js`),
                    platform: "node",
                });
            });
            await Promise.all(promises);
            const targetPkg = (0, node_path_1.join)(outDir, "package.json");
            const targetAssets = (0, node_path_1.join)(outDir, "assets");
            (0, node_fs_1.cpSync)("package.json", targetPkg, { force: true });
            if ((0, node_fs_1.existsSync)("assets")) {
                (0, node_fs_1.cpSync)("assets", targetAssets, { force: true, recursive: true });
            }
            else {
                (0, node_fs_1.mkdirSync)(targetAssets, { recursive: true });
            }
        };
        const pingError = vicinae.ping();
        if (pingError) {
            console.error(`Failed to ping vicinae\n`, pingError.message);
            return;
        }
        const safeBuild = async (extensionDir) => {
            try {
                const start = performance.now();
                await build(extensionDir);
                const time = performance.now() - start;
                logger.logReady(`Extension built in ${Math.round(time)}ms ðŸš€`);
                vicinae.refreshDevSession(id);
            }
            catch (error) {
                if (error instanceof Error) {
                    logger.logError(`Failed to build extension: ${error.message}`);
                }
                else {
                    logger.logError(`Failed to build extension: ${error}`);
                }
            }
        };
        process.chdir(flags.target);
        const dataDir = (0, utils_js_1.extensionDataDir)();
        const id = `${manifest.name}`;
        const extensionDir = (0, node_path_1.join)(dataDir, id);
        const logFile = (0, node_path_1.join)(extensionDir, "dev.log");
        const pidFile = (0, node_path_1.join)(extensionDir, "cli.pid");
        (0, node_fs_1.mkdirSync)(extensionDir, { recursive: true });
        (0, node_fs_1.writeFileSync)(pidFile, `${process.pid}`);
        (0, node_fs_1.writeFileSync)(logFile, "");
        await safeBuild(extensionDir);
        process.on("SIGINT", () => {
            logger.logInfo("Shutting down...");
            vicinae.stopDevSession(id);
            throw new Error(`Development session interrupted`);
        });
        const error = vicinae.startDevSession(id);
        if (error) {
            console.error(`Failed to invoke vicinae`, error);
            return;
        }
        chokidar
            .watch(["src", "package.json", "assets"], {
            awaitWriteFinish: { pollInterval: 100, stabilityThreshold: 100 },
            ignoreInitial: true,
        })
            .on("all", async (_, path) => {
            if (path.endsWith('package.json')) {
                manifest = parseManifest();
            }
            logger.logEvent(`changed file ${path}`);
            await safeBuild(extensionDir);
        });
        const logFiles = new Map();
        chokidar.watch(logFile).on("all", async (_, path) => {
            const stats = await (0, promises_1.stat)(path);
            if (!stats.isFile())
                return;
            if (!logFiles.has(path)) {
                //logger.logInfo(`Monitoring new log file at ${path}`);
                logFiles.set(path, { cursor: 0, path });
            }
            const info = logFiles.get(path);
            if (info.cursor > stats.size) {
                info.cursor = 0;
            }
            if (stats.size === info.cursor)
                return;
            const handle = await (0, promises_1.open)(path, "r");
            const buffer = Buffer.alloc(stats.size - info.cursor);
            (0, node_fs_1.read)(handle.fd, buffer, 0, buffer.length, info.cursor, (error, nRead) => {
                if (error)
                    return;
                info.cursor += nRead;
                logger.logTimestamp(buffer.toString());
                handle.close();
            });
        });
    }
}
exports.default = Develop;
